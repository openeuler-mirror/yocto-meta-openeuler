diff --git a/configure.ac b/configure.ac
index 4a1e6f7..e983bc3 100644
--- a/configure.ac
+++ b/configure.ac
@@ -8,8 +8,9 @@ AM_INIT_AUTOMAKE([subdir-objects -Wall -Werror foreign dist-xz])
 AM_SILENT_RULES([yes])
 
 # Use gcc-ar and gcc-ranlib for static libraries built with -flto
-AC_SUBST([AR], [${ac_tool_prefix}gcc-ar])
-AC_SUBST([RANLIB], [${ac_tool_prefix}gcc-ranlib])
+# Use user-defined AR and RANLIB env
+# AC_SUBST([AR], [${ac_tool_prefix}gcc-ar])
+# AC_SUBST([RANLIB], [${ac_tool_prefix}gcc-ranlib])
 
 # Checks for programs.
 AC_PROG_CXX
diff --git a/sdbusplus.hpp b/sdbusplus.hpp
index 909fbc3..0f5b0be 100644
--- a/sdbusplus.hpp
+++ b/sdbusplus.hpp
@@ -401,6 +401,22 @@ class SDBusPlus
         return getPropertyVariant<Variant>(getBus(), path, interface, property);
     }
 
+    /** @brief Invoke a method and return without checking for error. */
+    template <typename... Args>
+    static auto callMethodAndReturn(sdbusplus::bus::bus& bus,
+                                    const std::string& busName,
+                                    const std::string& path,
+                                    const std::string& interface,
+                                    const std::string& method, Args&&... args)
+    {
+        auto reqMsg = bus.new_method_call(busName.c_str(), path.c_str(),
+                                          interface.c_str(), method.c_str());
+        reqMsg.append(std::forward<Args>(args)...);
+        auto respMsg = bus.call(reqMsg);
+
+        return respMsg;
+    }
+
     /** @brief Get a property without mapper lookup. */
     template <typename Property>
     static auto getProperty(sdbusplus::bus::bus& bus,
@@ -573,22 +589,6 @@ class SDBusPlus
         return lookupCallMethodAndRead<Ret>(getBus(), path, interface, method,
                                             std::forward<Args>(args)...);
     }
-
-    /** @brief Invoke a method and return without checking for error. */
-    template <typename... Args>
-    static auto callMethodAndReturn(sdbusplus::bus::bus& bus,
-                                    const std::string& busName,
-                                    const std::string& path,
-                                    const std::string& interface,
-                                    const std::string& method, Args&&... args)
-    {
-        auto reqMsg = bus.new_method_call(busName.c_str(), path.c_str(),
-                                          interface.c_str(), method.c_str());
-        reqMsg.append(std::forward<Args>(args)...);
-        auto respMsg = bus.call(reqMsg);
-
-        return respMsg;
-    }
 };
 
 } // namespace util
