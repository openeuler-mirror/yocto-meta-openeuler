diff -uprN a/src/CMakeLists.txt b/src/CMakeLists.txt
--- a/src/CMakeLists.txt	2024-03-20 07:35:44.334203079 +0000
+++ b/src/CMakeLists.txt	2024-03-20 07:35:52.053278588 +0000
@@ -49,6 +49,7 @@ target_include_directories(libisulad_too
 
 set_target_properties(libisulad_tools PROPERTIES PREFIX "")
 target_link_libraries(libisulad_tools ${ZLIB_LIBRARY} ${ISULA_LIBUTILS_LIBRARY} ${CRYPTO_LIBRARY} ${CAP_LIBRARY})
+target_link_libraries(libisulad_tools -lgcompat)
 
 if (ENABLE_OCI_IMAGE)
     target_link_libraries(libisulad_tools ${LIBARCHIVE_LIBRARY})
diff -uprN a/src/cmd/isula/client_console.c b/src/cmd/isula/client_console.c
--- a/src/cmd/isula/client_console.c	2024-03-20 07:35:44.319202932 +0000
+++ b/src/cmd/isula/client_console.c	2024-03-20 07:35:52.036278422 +0000
@@ -137,8 +137,7 @@ int create_console_fifos(bool attach_std
         return -1;
     }
 
-    ret = snprintf(subpath, sizeof(subpath), "%s/%s-%u-%u", name, type, (unsigned int)getpid(),
-                   (unsigned int)pthread_self());
+    ret = snprintf(subpath, sizeof(subpath), "%s/%s-%u", name, type, (unsigned int)getpid());
     if (ret < 0 || (size_t)ret >= sizeof(subpath)) {
         ERROR("Path is too long");
         goto cleanup;
diff -uprN a/src/cmd/isulad/main.c b/src/cmd/isulad/main.c
--- a/src/cmd/isulad/main.c	2024-03-20 07:35:44.321202952 +0000
+++ b/src/cmd/isulad/main.c	2024-03-20 07:35:52.037278431 +0000
@@ -40,6 +40,7 @@
 #include <string.h>
 #include <strings.h>
 #include <sys/time.h>
+#include <malloc_utils.h>
 #ifdef ENABLE_SUP_GROUPS
 #include <grp.h>
 #endif
diff -uprN a/src/daemon/executor/container_cb/execution.c b/src/daemon/executor/container_cb/execution.c
--- a/src/daemon/executor/container_cb/execution.c	2024-03-20 07:35:44.322202962 +0000
+++ b/src/daemon/executor/container_cb/execution.c	2024-03-20 07:35:52.046278519 +0000
@@ -23,6 +23,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <libgen.h>
+#include <malloc_utils.h>
 
 #include <isula_libutils/container_config.h>
 #include <isula_libutils/container_config_v2.h>
@@ -474,9 +475,9 @@ static int container_start_prepare(conta
 static void handle_start_io_thread_by_cc(uint32_t cc, int sync_fd, pthread_t thread_id)
 {
     if (cc == ISULAD_SUCCESS) {
-        if (thread_id > 0) {
+        if (thread_id != NULL) {
             if (pthread_detach(thread_id) != 0) {
-                SYSERROR("Failed to detach 0x%lx", thread_id);
+                SYSERROR("Failed to detach");
             }
         }
         if (sync_fd >= 0) {
@@ -488,9 +489,9 @@ static void handle_start_io_thread_by_cc
                 SYSERROR("Failed to write eventfd.");
             }
         }
-        if (thread_id > 0) {
+        if (thread_id != NULL) { 
             if (pthread_join(thread_id, NULL) != 0) {
-                ERROR("Failed to join thread: 0x%lx", thread_id);
+                ERROR("Failed to join thread");
             }
         }
         if (sync_fd >= 0) {
@@ -508,7 +509,7 @@ static int container_start_cb(const cont
     char *fifopath = NULL;
     container_t *cont = NULL;
     int sync_fd = -1;
-    pthread_t thread_id = 0;
+    pthread_t thread_id = NULL;
 
     DAEMON_CLEAR_ERRMSG();
 
diff -uprN a/src/daemon/executor/container_cb/execution_create.c b/src/daemon/executor/container_cb/execution_create.c
--- a/src/daemon/executor/container_cb/execution_create.c	2024-03-20 07:35:44.322202962 +0000
+++ b/src/daemon/executor/container_cb/execution_create.c	2024-03-20 07:35:52.045278509 +0000
@@ -24,6 +24,7 @@
 #include <stdint.h>
 #include <stdlib.h>
 #include <string.h>
+#include <malloc_utils.h>
 
 #include <isula_libutils/log.h>
 #include <isula_libutils/auto_cleanup.h>
diff -uprN a/src/daemon/executor/container_cb/execution_information.c b/src/daemon/executor/container_cb/execution_information.c
--- a/src/daemon/executor/container_cb/execution_information.c	2024-03-20 07:35:44.322202962 +0000
+++ b/src/daemon/executor/container_cb/execution_information.c	2024-03-20 07:35:52.046278519 +0000
@@ -39,6 +39,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <sys/utsname.h>
+#include <malloc_utils.h>
 
 #include "isula_libutils/log.h"
 #include "isulad_config.h"
diff -uprN a/src/daemon/executor/container_cb/execution_stream.c b/src/daemon/executor/container_cb/execution_stream.c
--- a/src/daemon/executor/container_cb/execution_stream.c	2024-03-20 07:35:44.322202962 +0000
+++ b/src/daemon/executor/container_cb/execution_stream.c	2024-03-20 07:35:52.046278519 +0000
@@ -64,7 +64,10 @@
 #include "utils_verify.h"
 #include "isulad_config.h"
 
-#if defined (__ANDROID__) || defined(__MUSL__)
+#if defined (__ANDROID__)
+#undef SIG_CANCEL_SIGNAL
+#undef PTHREAD_CANCEL_ENABLE
+#undef PTHREAD_CANCEL_DISABLE
 #define SIG_CANCEL_SIGNAL     SIGUSR1
 #define PTHREAD_CANCEL_ENABLE    1
 #define PTHREAD_CANCEL_DISABLE    0
@@ -284,9 +287,9 @@ out:
 static void handle_attach_io_thread_by_cc(uint32_t cc, int sync_fd, pthread_t thread_id)
 {
     if (cc == ISULAD_SUCCESS) {
-        if (thread_id > 0) {
+        if (thread_id != NULL) {
             if (pthread_detach(thread_id) != 0) {
-                SYSERROR("Failed to detach 0x%lx", thread_id);
+                SYSERROR("Failed to detach");
             }
         }
         if (sync_fd >= 0) {
@@ -298,9 +301,9 @@ static void handle_attach_io_thread_by_c
                 SYSERROR("Failed to write eventfd.");
             }
         }
-        if (thread_id > 0) {
+        if (thread_id != NULL) {
             if (pthread_join(thread_id, NULL) != 0) {
-                ERROR("Failed to join thread: 0x%lx", thread_id);
+                ERROR("Failed to join thread");
             }
         }
         if (sync_fd >= 0) {
@@ -318,7 +321,7 @@ static int container_attach_cb(const con
     char *fifos[3] = { NULL, NULL, NULL };
     char *fifopath = NULL;
     int syncfd = -1;
-    pthread_t tid = 0;
+    pthread_t tid = NULL;
     container_t *cont = NULL;
     rt_attach_params_t params = { 0 };
 
diff -uprN a/src/daemon/executor/image_cb/image_cb.c b/src/daemon/executor/image_cb/image_cb.c
--- a/src/daemon/executor/image_cb/image_cb.c	2024-03-20 07:35:44.322202962 +0000
+++ b/src/daemon/executor/image_cb/image_cb.c	2024-03-20 07:35:52.045278509 +0000
@@ -47,6 +47,7 @@
 #include <stdint.h>
 #include <stdlib.h>
 #include <string.h>
+#include <malloc_utils.h>
 
 #include "utils.h"
 #include "error.h"
@@ -1203,4 +1204,4 @@ void image_callback_init(service_image_c
 #ifdef ENABLE_IMAGE_SEARCH
     cb->search = image_search_cb;
 #endif
-}
\ No newline at end of file
+}
diff -uprN a/src/daemon/modules/events/monitord.c b/src/daemon/modules/events/monitord.c
--- a/src/daemon/modules/events/monitord.c	2024-03-20 07:35:44.327203011 +0000
+++ b/src/daemon/modules/events/monitord.c	2024-03-20 07:35:52.041278470 +0000
@@ -24,6 +24,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <sys/prctl.h>
+#include <malloc_utils.h>
 
 #include "isula_libutils/log.h"
 #include "mainloop.h"
diff -uprN a/src/daemon/modules/image/image_rootfs_handler.c b/src/daemon/modules/image/image_rootfs_handler.c
--- a/src/daemon/modules/image/image_rootfs_handler.c	2024-03-20 07:35:44.329203030 +0000
+++ b/src/daemon/modules/image/image_rootfs_handler.c	2024-03-20 07:35:52.044278500 +0000
@@ -26,6 +26,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <pwd_utils.h>
 
 #include "isula_libutils/log.h"
 #include "err_msg.h"
diff -uprN a/src/daemon/modules/image/oci/storage/layer_store/layer_store.c b/src/daemon/modules/image/oci/storage/layer_store/layer_store.c
--- a/src/daemon/modules/image/oci/storage/layer_store/layer_store.c	2024-03-20 07:35:44.332203060 +0000
+++ b/src/daemon/modules/image/oci/storage/layer_store/layer_store.c	2024-03-20 07:35:52.042278480 +0000
@@ -30,6 +30,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <sys/stat.h>
+#include <unistd.h>
 
 #include "util_archive.h"
 #include "storage.h"
diff -uprN a/src/daemon/modules/service/io_handler.c b/src/daemon/modules/service/io_handler.c
--- a/src/daemon/modules/service/io_handler.c	2024-03-20 07:35:44.334203079 +0000
+++ b/src/daemon/modules/service/io_handler.c	2024-03-20 07:35:52.044278500 +0000
@@ -116,7 +116,6 @@ int create_daemon_fifos(const char *id,
     char subpath[PATH_MAX] = { 0 };
     char fifodir[PATH_MAX] = { 0 };
     struct timespec now;
-    pthread_t tid;
 
     nret = clock_gettime(CLOCK_REALTIME, &now);
     if (nret != 0) {
@@ -124,15 +123,13 @@ int create_daemon_fifos(const char *id,
         goto cleanup;
     }
 
-    tid = pthread_self();
-
     statepath = conf_get_routine_statedir(runtime);
     if (statepath == NULL) {
         ERROR("State path is NULL");
         goto cleanup;
     }
 
-    nret = snprintf(subpath, PATH_MAX, "%s/%s/%u_%u_%u", id, operation, (unsigned int)tid, (unsigned int)now.tv_sec,
+    nret = snprintf(subpath, PATH_MAX, "%s/%s/%u_%u", id, operation,  (unsigned int)now.tv_sec,
                     (unsigned int)(now.tv_nsec));
     if (nret < 0 || (size_t)nret >= PATH_MAX) {
         ERROR("Failed to print string");
diff -uprN a/src/daemon/modules/service/service_container.c b/src/daemon/modules/service/service_container.c
--- a/src/daemon/modules/service/service_container.c	2024-03-20 07:35:44.334203079 +0000
+++ b/src/daemon/modules/service/service_container.c	2024-03-20 07:35:52.044278500 +0000
@@ -2163,9 +2163,9 @@ static void exec_container_end(container
             SYSERROR("Failed to write eventfd");
         }
     }
-    if (thread_id > 0) {
+    if (thread_id != NULL) {
         if (pthread_join(thread_id, NULL) != 0) {
-            ERROR("Failed to join thread: 0x%lx", thread_id);
+            ERROR("Failed to join thread");
         }
     }
     if (sync_fd >= 0) {
@@ -2247,7 +2247,7 @@ int exec_container(const container_t *co
     char *id = NULL;
     char *io_addresses[3] = { NULL, NULL, NULL };
     char *iopath = NULL;
-    pthread_t thread_id = 0;
+    pthread_t thread_id = NULL;
     defs_process_user *puser = NULL;
     char exec_command[EVENT_ARGS_MAX] = { 0x00 };
 
