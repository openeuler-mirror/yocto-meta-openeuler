From 389dd09e6fc15525677be75ba121e6bb5f28c066 Mon Sep 17 00:00:00 2001
From: hanzongcheng <hanzongcheng@huawei.com>
Date: Sat, 9 Sep 2023 06:35:23 +0800
Subject: [PATCH] driver: Add support for remote proc

* Add some helpers to support for creating, loading, launching
  and destroying cells via rproc sysfs.
* Add jailhouse_rproc_helpers.h to export symbol.
* Add a copy of remoteproc_elf_helpers.h from linux kernel
  to support elf parsing.

Signed-off-by: hanzongcheng <hanzongcheng@huawei.com>

diff --git a/driver/cell.c b/driver/cell.c
index ade61edb..7ba90489 100644
--- a/driver/cell.c
+++ b/driver/cell.c
@@ -77,6 +77,8 @@ retry:
 		    min((unsigned int)nr_cpumask_bits,
 		        cell_desc->cpu_set_size * 8));
 
+	/* get cpu_reset_address from cell_desc */
+	cell->cpu_reset_address = cell_desc->cpu_reset_address;
 	cell->num_memory_regions = cell_desc->num_memory_regions;
 	cell->memory_regions = vmalloc(sizeof(struct jailhouse_memory) *
 				       cell->num_memory_regions);
@@ -484,3 +486,418 @@ int jailhouse_cmd_cell_destroy_non_root(void)
 
 	return 0;
 }
+
+static void *read_jailhouse_file(const char *path_of_jh, const char *name, size_t *size)
+{
+	int ret, len;
+	void *buf = NULL;
+	char *file_path;
+	struct path path;
+	struct file *fp;
+	struct kstat stat;
+	loff_t pos = 0;
+
+	file_path = __getname();
+	if (!file_path)
+		return NULL;
+
+	len = snprintf(file_path, PATH_MAX, "%s/%s",
+		       path_of_jh, name);
+	if (len >= PATH_MAX) {
+		pr_err("Too long path: %s/%s\n", path_of_jh, name);
+		goto err;
+	}
+
+	ret = kern_path(file_path, LOOKUP_FOLLOW, &path);
+	if (ret) {
+		pr_err("path not found: %s\n", file_path);
+		goto err;
+	}
+
+	ret = vfs_getattr(&path, &stat, STATX_BASIC_STATS, AT_STATX_SYNC_AS_STAT);
+	path_put(&path);
+	if (ret) {
+		pr_err("vfs_getattr failed, ret %d\n", ret);
+		goto err;
+	}
+
+	if (stat.size <= 0) {
+		pr_err("%s is empty\n", file_path);
+		goto err;
+	}
+
+	fp = filp_open(file_path, O_RDONLY, 0);
+	if (IS_ERR(fp)) {
+		pr_err("open %s failed\n", file_path);
+		goto err;
+	}
+
+	buf = kmalloc(stat.size, GFP_KERNEL);
+	if (!buf) {
+		pr_err("failed to allocate buffer\n");
+		goto err_fclose;
+	}
+
+	ret = kernel_read(fp, buf, stat.size, &pos);
+	if (ret != stat.size) {
+		pr_err("failed to read %s, ret %d\n", file_path, ret);
+		goto err_fclose;
+	}
+
+	*size = stat.size;
+
+err_fclose:
+	filp_close(fp, NULL);
+err:
+	__putname(file_path);
+	return buf;
+}
+
+int jh_cell_create_by_rproc(const struct rproc *rproc)
+{
+	size_t size;
+	struct jailhouse_cell_desc *config;
+	struct jailhouse_cell_id cell_id;
+	struct cell *cell;
+	unsigned int cpu;
+	int err = 0;
+
+	if (!rproc->jh_cell)
+		return -EINVAL;
+
+	config = (struct jailhouse_cell_desc *)read_jailhouse_file(JH_CELL_PATH, rproc->jh_cell, &size);
+	if (!config)
+		return -EFAULT;
+
+	if (memcmp(config->signature, JAILHOUSE_CELL_DESC_SIGNATURE,
+	    sizeof(config->signature)) != 0) {
+		pr_err("jailhouse: Not a cell configuration\n");
+		err = -EINVAL;
+		goto kfree_config_out;
+	}
+	if (config->revision != JAILHOUSE_CONFIG_REVISION) {
+		pr_err("jailhouse: Configuration revision mismatch\n");
+		err = -EINVAL;
+		goto kfree_config_out;
+	}
+
+	config->name[JAILHOUSE_CELL_NAME_MAXLEN] = 0;
+
+	/* CONSOLE_ACTIVE implies CONSOLE_PERMITTED for non-root cells */
+	if (CELL_FLAGS_VIRTUAL_CONSOLE_ACTIVE(config->flags))
+		config->flags |= JAILHOUSE_CELL_VIRTUAL_CONSOLE_PERMITTED;
+
+	if (mutex_lock_interruptible(&jailhouse_lock) != 0) {
+		err = -EINTR;
+		goto kfree_config_out;
+	}
+
+	if (!jailhouse_enabled) {
+		err = -EINVAL;
+		goto unlock_out;
+	}
+
+	cell_id.id = JAILHOUSE_CELL_ID_UNUSED;
+	memcpy(cell_id.name, config->name, sizeof(cell_id.name));
+	if (find_cell(&cell_id) != NULL) {
+		err = -EEXIST;
+		goto unlock_out;
+	}
+
+	cell = cell_create(config);
+	if (IS_ERR(cell)) {
+		err = PTR_ERR(cell);
+		goto unlock_out;
+	}
+
+	config->id = cell->id;
+
+	if (!cpumask_subset(&cell->cpus_assigned, &root_cell->cpus_assigned)) {
+		err = -EBUSY;
+		goto error_cell_delete;
+	}
+
+	/* Off-line each CPU assigned to the new cell and remove it from the
+	 * root cell's set. */
+	for_each_cpu(cpu, &cell->cpus_assigned) {
+#ifdef CONFIG_X86
+		if (cpu == 0) {
+			/*
+			 * On x86, Linux only parks CPU 0 when offlining it and
+			 * expects to be able to get it back by sending an IPI.
+			 * This is not support by Jailhouse wich destroys the
+			 * CPU state across non-root assignments.
+			 */
+			pr_err("Cannot assign CPU 0 to other cells\n");
+			err = -EINVAL;
+			goto error_cpu_online;
+		}
+#endif
+		if (cpu_online(cpu)) {
+			err = remove_cpu(cpu);
+			if (err)
+				goto error_cpu_online;
+			cpumask_set_cpu(cpu, &offlined_cpus);
+		}
+		cpumask_clear_cpu(cpu, &root_cell->cpus_assigned);
+	}
+
+	jailhouse_pci_do_all_devices(cell, JAILHOUSE_PCI_TYPE_DEVICE,
+	                             JAILHOUSE_PCI_ACTION_CLAIM);
+
+	err = jailhouse_call_arg1(JAILHOUSE_HC_CELL_CREATE, __pa(config));
+	if (err < 0)
+		goto error_cpu_online;
+
+	cell_register(cell);
+
+	pr_info("Created Jailhouse cell \"%s\"\n", config->name);
+
+unlock_out:
+	mutex_unlock(&jailhouse_lock);
+
+kfree_config_out:
+	kfree(config);
+
+	return err;
+
+error_cpu_online:
+	for_each_cpu(cpu, &cell->cpus_assigned) {
+		if (!cpu_online(cpu) && add_cpu(cpu) == 0)
+			cpumask_clear_cpu(cpu, &offlined_cpus);
+		cpumask_set_cpu(cpu, &root_cell->cpus_assigned);
+	}
+
+error_cell_delete:
+	cell_delete(cell);
+	goto unlock_out;
+}
+EXPORT_SYMBOL(jh_cell_create_by_rproc);
+
+
+static u64 find_mem_in_cell(struct cell *cell, u64 target_address, u64 size, u64 *offset)
+{
+	const struct jailhouse_memory *mem;
+	unsigned int regions;
+	u64 image_offset;
+
+	if (size == 0)
+		return 0;
+
+	mem = cell->memory_regions;
+	for (regions = cell->num_memory_regions; regions > 0; regions--) {
+		image_offset = target_address - mem->virt_start;
+		if (target_address >= mem->virt_start &&
+		    image_offset < mem->size) {
+			if (size > mem->size - image_offset ||
+			    (mem->flags & MEM_REQ_FLAGS) != MEM_REQ_FLAGS)
+				return -EINVAL;
+			break;
+		}
+		mem++;
+	}
+	if (regions == 0)
+		return -EINVAL;
+
+	*offset = image_offset;
+
+	return mem->phys_start + image_offset;
+}
+
+int load_elf_segments_to_cell(struct cell *cell, const struct rproc *rproc, const struct firmware *fw)
+{
+	const void *ehdr, *phdr;
+	int i;
+	u16 phnum;
+	int ret = 0;
+	const u8 *elf_data = fw->data;
+	size_t fw_size = fw->size;
+	u8 class = fw_elf_get_class(fw);
+	u32 elf_phdr_get_size = elf_size_of_phdr(class);
+
+	ehdr = elf_data;
+	phnum = elf_hdr_get_e_phnum(class, ehdr);
+	phdr = elf_data + elf_hdr_get_e_phoff(class, ehdr);
+
+	/* go through the available ELF segments */
+	for (i = 0; i < phnum; i++, phdr += elf_phdr_get_size) {
+		u64 pa = elf_phdr_get_p_paddr(class, phdr);
+		u64 memsz = elf_phdr_get_p_memsz(class, phdr);
+		u64 filesz = elf_phdr_get_p_filesz(class, phdr);
+		u64 offset = elf_phdr_get_p_offset(class, phdr);
+		u32 type = elf_phdr_get_p_type(class, phdr);
+		void *image_mem;
+		u64 image_offset, phys_start;
+		unsigned int page_offs;
+
+		if (type != PT_LOAD)
+			continue;
+
+		if (filesz > memsz) {
+			pr_err("bad phdr filesz 0x%llx memsz 0x%llx\n",
+				filesz, memsz);
+			ret = -EINVAL;
+			break;
+		}
+
+		if (offset + filesz > fw_size) {
+			pr_err("truncated fw: need 0x%llx avail 0x%zx\n",
+				offset + filesz, fw_size);
+			ret = -EINVAL;
+			break;
+		}
+
+		if (sizeof(size_t) != sizeof(u64) || memsz > (size_t) - 1) {
+			pr_err("size (%llx) does not fit in size_t type\n", memsz);
+			ret = -EOVERFLOW;
+			break;
+		}
+
+		phys_start = find_mem_in_cell(cell, pa, memsz, &image_offset);
+		if (phys_start <= 0) {
+			pr_err("bad phdr pa 0x%llx mem 0x%llx\n", pa, memsz);
+			ret = -EINVAL;
+			break;
+		}
+
+		/* put the segment where the remote processor expects it */
+		if (filesz) {
+			phys_start = phys_start & PAGE_MASK;
+			page_offs = offset_in_page(image_offset);
+			image_mem = jailhouse_ioremap(phys_start, 0,
+						      PAGE_ALIGN(memsz + page_offs));
+			if (!image_mem) {
+				pr_err("jailhouse: Unable to map cell RAM at %08llx "
+				      "for image loading\n",
+				      (unsigned long long)phys_start);
+				return -EBUSY;
+			}
+
+			memcpy(image_mem + page_offs, elf_data + offset, filesz);
+
+			/*
+			* Zero out remaining memory for this segment.
+			*
+			* This isn't strictly required since dma_alloc_coherent already
+			* did this for us. albeit harmless, we may consider removing
+			* this.
+			*/
+			if (memsz > filesz)
+				memset(image_mem + page_offs + filesz, 0, memsz - filesz);
+			/*
+			* ARMv7 and ARMv8 require to clean D-cache and invalidate I-cache for
+			* memory containing new instructions. On x86 this is a NOP.
+			*/
+			flush_icache_range((unsigned long)(image_mem + page_offs),
+					  (unsigned long)(image_mem + page_offs) + memsz);
+#ifdef CONFIG_ARM
+			/*
+			* ARMv7 requires to flush the written code and data out of D-cache to
+			* allow the guest starting off with caches disabled.
+			*/
+			__cpuc_flush_dcache_area(image_mem + page_offs, memsz);
+#endif
+
+			vunmap(image_mem);
+		}
+
+	}
+
+	return ret;
+}
+
+static void get_cell_id_from_rproc(const struct rproc *rproc, struct jailhouse_cell_id *cell_id)
+{
+	size_t size;
+	struct jailhouse_cell_desc *config;
+
+	/*
+	 * get cell name form jh_cell. There is no need a config validity check.
+	 * We have already done this when create the cell.
+	 */
+	config = (struct jailhouse_cell_desc *)read_jailhouse_file(JH_CELL_PATH, rproc->jh_cell, &size);
+	config->name[JAILHOUSE_CELL_NAME_MAXLEN] = 0;
+	memcpy(cell_id->name, config->name, sizeof(cell_id->name));
+	cell_id->id = JAILHOUSE_CELL_ID_UNUSED;
+	kfree(config);
+}
+
+int jh_cell_load_by_rproc(const struct rproc *rproc, const struct firmware *fw)
+{
+	int err;
+	struct cell *cell;
+	struct jailhouse_cell_id cell_id;
+
+	get_cell_id_from_rproc(rproc, &cell_id);
+
+	err = cell_management_prologue(&cell_id, &cell);
+	if (err) {
+		pr_err("Cannot find cell: %s, ret=%d\n", cell_id.name, err);
+		return err;
+	}
+
+	err = jailhouse_call_arg1(JAILHOUSE_HC_CELL_SET_LOADABLE, cell->id);
+	if (err)
+		goto unlock_out;
+
+	err = load_elf_segments_to_cell(cell, rproc, fw);
+	if (err)
+		pr_err("load_elf_segments_to_cell failed, err: %d\n", err);
+
+unlock_out:
+	mutex_unlock(&jailhouse_lock);
+
+	return err;
+}
+EXPORT_SYMBOL(jh_cell_load_by_rproc);
+
+int jh_cell_start_by_rproc(const struct rproc *rproc)
+{
+	int err;
+	struct cell *cell;
+	struct jailhouse_cell_id cell_id;
+
+	get_cell_id_from_rproc(rproc, &cell_id);
+
+	err = cell_management_prologue(&cell_id, &cell);
+	if (err) {
+		pr_err("Cannot find cell: %s, ret=%d\n", cell_id.name, err);
+		return err;
+	}
+
+	err = jailhouse_call_arg1(JAILHOUSE_HC_CELL_START, cell->id);
+
+	mutex_unlock(&jailhouse_lock);
+
+	return err;
+}
+EXPORT_SYMBOL(jh_cell_start_by_rproc);
+
+int jh_cell_stop_by_rproc(const struct rproc *rproc)
+{
+	int err;
+	struct cell *cell;
+	struct jailhouse_cell_id cell_id;
+
+	get_cell_id_from_rproc(rproc, &cell_id);
+
+	/* step1: shutdown cell */
+	err = cell_management_prologue(&cell_id, &cell);
+	if (err) {
+		pr_err("Cannot find cell: %s, ret=%d\n", cell_id.name, err);
+		return err;
+	}
+
+	err = jailhouse_call_arg1(JAILHOUSE_HC_CELL_SET_LOADABLE, cell->id);
+	if (err)
+		goto unlock_out;
+
+	/* step2: destroy cell */
+	err = cell_destroy(cell);
+
+unlock_out:
+	mutex_unlock(&jailhouse_lock);
+
+	return err;
+}
+EXPORT_SYMBOL(jh_cell_stop_by_rproc);
diff --git a/driver/cell.h b/driver/cell.h
index 92afbff8..c578cd58 100644
--- a/driver/cell.h
+++ b/driver/cell.h
@@ -19,6 +19,8 @@
 #include <linux/uaccess.h>
 
 #include "jailhouse.h"
+#include "jailhouse_rproc_helpers.h"
+#include "remoteproc_elf_helpers.h"
 
 #include <jailhouse/cell-config.h>
 
@@ -36,6 +38,11 @@ struct cell {
 	u32 num_pci_devices;
 	struct jailhouse_pci_device *pci_devices;
 #endif /* CONFIG_PCI */
+	/*
+	 * Record the cpu reset address in the cell
+	 * to help us boot the inmate
+	 */
+	u64 cpu_reset_address;
 };
 
 extern struct cell *root_cell;
diff --git a/driver/jailhouse_rproc_helpers.h b/driver/jailhouse_rproc_helpers.h
new file mode 100644
index 00000000..0a25659f
--- /dev/null
+++ b/driver/jailhouse_rproc_helpers.h
@@ -0,0 +1,12 @@
+#include <linux/remoteproc.h>
+#include <linux/firmware.h>
+#include <linux/elf.h>
+#include <linux/namei.h>
+
+#define JH_CELL_PATH	"/usr/share/jailhouse/cells"
+#define JH_INMATE_PATH	"/lib/firmware"
+
+int jh_cell_create_by_rproc(const struct rproc *rproc);
+int jh_cell_load_by_rproc(const struct rproc *rproc, const struct firmware *fw);
+int jh_cell_start_by_rproc(const struct rproc *rproc);
+int jh_cell_stop_by_rproc(const struct rproc *rproc);
diff --git a/driver/remoteproc_elf_helpers.h b/driver/remoteproc_elf_helpers.h
new file mode 100644
index 00000000..4b6be7b6
--- /dev/null
+++ b/driver/remoteproc_elf_helpers.h
@@ -0,0 +1,96 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/*
+ * Remote processor elf helpers defines
+ *
+ * Copyright (C) 2020 Kalray, Inc.
+ */
+
+#ifndef REMOTEPROC_ELF_LOADER_H
+#define REMOTEPROC_ELF_LOADER_H
+
+#include <linux/elf.h>
+#include <linux/types.h>
+
+/**
+ * fw_elf_get_class - Get elf class
+ * @fw: the ELF firmware image
+ *
+ * Note that we use and elf32_hdr to access the class since the start of the
+ * struct is the same for both elf class
+ *
+ * Return: elf class of the firmware
+ */
+static inline u8 fw_elf_get_class(const struct firmware *fw)
+{
+	struct elf32_hdr *ehdr = (struct elf32_hdr *)fw->data;
+
+	return ehdr->e_ident[EI_CLASS];
+}
+
+static inline void elf_hdr_init_ident(struct elf32_hdr *hdr, u8 class)
+{
+	memcpy(hdr->e_ident, ELFMAG, SELFMAG);
+	hdr->e_ident[EI_CLASS] = class;
+	hdr->e_ident[EI_DATA] = ELFDATA2LSB;
+	hdr->e_ident[EI_VERSION] = EV_CURRENT;
+	hdr->e_ident[EI_OSABI] = ELFOSABI_NONE;
+}
+
+/* Generate getter and setter for a specific elf struct/field */
+#define ELF_GEN_FIELD_GET_SET(__s, __field, __type) \
+static inline __type elf_##__s##_get_##__field(u8 class, const void *arg) \
+{ \
+	if (class == ELFCLASS32) \
+		return (__type) ((const struct elf32_##__s *) arg)->__field; \
+	else \
+		return (__type) ((const struct elf64_##__s *) arg)->__field; \
+} \
+static inline void elf_##__s##_set_##__field(u8 class, void *arg, \
+					     __type value) \
+{ \
+	if (class == ELFCLASS32) \
+		((struct elf32_##__s *) arg)->__field = (__type) value; \
+	else \
+		((struct elf64_##__s *) arg)->__field = (__type) value; \
+}
+
+ELF_GEN_FIELD_GET_SET(hdr, e_entry, u64)
+ELF_GEN_FIELD_GET_SET(hdr, e_phnum, u16)
+ELF_GEN_FIELD_GET_SET(hdr, e_shnum, u16)
+ELF_GEN_FIELD_GET_SET(hdr, e_phoff, u64)
+ELF_GEN_FIELD_GET_SET(hdr, e_shoff, u64)
+ELF_GEN_FIELD_GET_SET(hdr, e_shstrndx, u16)
+ELF_GEN_FIELD_GET_SET(hdr, e_machine, u16)
+ELF_GEN_FIELD_GET_SET(hdr, e_type, u16)
+ELF_GEN_FIELD_GET_SET(hdr, e_version, u32)
+ELF_GEN_FIELD_GET_SET(hdr, e_ehsize, u32)
+ELF_GEN_FIELD_GET_SET(hdr, e_phentsize, u16)
+
+ELF_GEN_FIELD_GET_SET(phdr, p_paddr, u64)
+ELF_GEN_FIELD_GET_SET(phdr, p_vaddr, u64)
+ELF_GEN_FIELD_GET_SET(phdr, p_filesz, u64)
+ELF_GEN_FIELD_GET_SET(phdr, p_memsz, u64)
+ELF_GEN_FIELD_GET_SET(phdr, p_type, u32)
+ELF_GEN_FIELD_GET_SET(phdr, p_offset, u64)
+ELF_GEN_FIELD_GET_SET(phdr, p_flags, u32)
+ELF_GEN_FIELD_GET_SET(phdr, p_align, u64)
+
+ELF_GEN_FIELD_GET_SET(shdr, sh_size, u64)
+ELF_GEN_FIELD_GET_SET(shdr, sh_offset, u64)
+ELF_GEN_FIELD_GET_SET(shdr, sh_name, u32)
+ELF_GEN_FIELD_GET_SET(shdr, sh_addr, u64)
+
+#define ELF_STRUCT_SIZE(__s) \
+static inline unsigned long elf_size_of_##__s(u8 class) \
+{ \
+	if (class == ELFCLASS32)\
+		return sizeof(struct elf32_##__s); \
+	else \
+		return sizeof(struct elf64_##__s); \
+}
+
+ELF_STRUCT_SIZE(shdr)
+ELF_STRUCT_SIZE(phdr)
+ELF_STRUCT_SIZE(hdr)
+
+#endif /* REMOTEPROC_ELF_LOADER_H */
-- 
2.34.1

