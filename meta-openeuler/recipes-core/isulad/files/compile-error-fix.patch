diff --git a/src/client/connect/protocol_type.c b/src/client/connect/protocol_type.c
index d77e088..79b699b 100644
--- a/src/client/connect/protocol_type.c
+++ b/src/client/connect/protocol_type.c
@@ -72,7 +72,7 @@ int isula_filters_last_parse_args(size_t last_n, struct isula_filters **flt)
         goto cleanup;
     }
 
-    ret = snprintf(value, VALUE_SIZE, "%ld", last_n);
+    ret = snprintf(value, VALUE_SIZE, "%zu", last_n);
     if (ret < 0 || ret >= VALUE_SIZE) {
         ret = -1;
         ERROR("Sprintf lastest n containers args failed");
diff --git a/src/daemon/modules/service/service_network.c b/src/daemon/modules/service/service_network.c
index 2e7fa28..9bacdd8 100644
--- a/src/daemon/modules/service/service_network.c
+++ b/src/daemon/modules/service/service_network.c
@@ -698,7 +698,7 @@ static int update_container_networks_info(const network_api_result_list *result,
     }
 
     if (result->len != networks->len) {
-        ERROR("result len %lu doesn't match networks len %lu", result->len, networks->len);
+        ERROR("result len %zu doesn't match networks len %zu", result->len, networks->len);
         return -1;
     }
 
diff --git a/src/utils/cutils/utils_port.c b/src/utils/cutils/utils_port.c
index 583a350..236c433 100644
--- a/src/utils/cutils/utils_port.c
+++ b/src/utils/cutils/utils_port.c
@@ -18,6 +18,9 @@
 #include <netinet/in.h>
 #include <sys/socket.h>
 #include <unistd.h>
+#include <inttypes.h>
+
+#define __STDC_FORMAT_MACROS
 
 #include <isula_libutils/log.h>
 
@@ -192,7 +195,7 @@ char *util_pack_port_proto(uint64_t port, const char *proto)
         return NULL;
     }
 
-    ret = snprintf(port_proto, MAX_BUFFER_SIZE, "%lu/%s", port, proto);
+    ret = snprintf(port_proto, MAX_BUFFER_SIZE, "%" PRIu64 "/%s", port, proto);
     if (ret < 0 || (size_t)ret >= MAX_BUFFER_SIZE) {
         return NULL;
     }
@@ -279,7 +282,7 @@ static int process_range_to_range(ports_t port_data, const char *raw_ip, struct
         char format_host_port[MAX_BUFFER_SIZE] = { 0 };
         int nret = 0;
 
-        nret = snprintf(format_host_port, MAX_BUFFER_SIZE, "%lu", port_data.start_hport + i);
+        nret = snprintf(format_host_port, MAX_BUFFER_SIZE, "%" PRIu64, port_data.start_hport + i);
         if (nret < 0 || (size_t)nret >= MAX_BUFFER_SIZE) {
             ERROR("Format print host port err");
             ret = -1;
@@ -826,7 +829,7 @@ out:
 static bool valid_port(uint64_t port)
 {
     if (port < 1 || port > 65535) {
-        ERROR("Port numbers must be between 1 and 65535 (inclusive), got %lu", port);
+        ERROR("Port numbers must be between 1 and 65535 (inclusive), got %" PRIu64, port);
         return false;
     }
 
@@ -926,9 +929,9 @@ bool util_new_network_port(const char *proto, const char *port, struct network_p
     }
 
     if (work->start == work->end) {
-        ret = sprintf(buff, "%zu/%s", work->start, proto) > 0;
+        ret = sprintf(buff, "%" PRIu64 "/%s", work->start, proto) > 0;
     } else {
-        ret = sprintf(buff, "%zu-%zu/%s", work->start, work->end, proto) > 0;
+        ret = sprintf(buff, "%" PRIu64 "-%" PRIu64 "/%s", work->start, work->end, proto) > 0;
     }
     if (!ret) {
         ERROR("format port failed");
diff --git a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/deviceset.c b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/deviceset.c
index 0259cf3..4423f7f 100644
--- a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/deviceset.c
+++ b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/deviceset.c
@@ -432,7 +432,7 @@ static int pool_status(struct device_set *devset, uint64_t *total_size_in_sector
     }
 
     *total_size_in_sectors = length;
-    if (sscanf(params, "%lu %lu/%lu %lu/%lu", transaction_id, metadata_used, metadata_total, data_used, data_total) !=
+    if (sscanf(params, "%" PRIu64 " %" PRIu64 "/%" PRIu64 "%" PRIu64 "/%" PRIu64, transaction_id, metadata_used, metadata_total, data_used, data_total) !=
         5) {
         ERROR("devmapper: sscanf device status params failed");
         ret = -1;
@@ -1067,7 +1067,7 @@ static int process_pending_transaction(struct device_set *devset)
     // If open transaction ID is less than pool transaction ID, something
     // is wrong. Bail out.
     if (devset->transaction_id > devset->metadata_trans->open_transaction_id) {
-        WARN("devmapper: Open Transaction id %ld is less than pool transaction id %ld",
+        WARN("devmapper: Open Transaction id %" PRIu64 " is less than pool transaction id %" PRIu64,
              devset->metadata_trans->open_transaction_id, devset->transaction_id);
         goto out;
     }
@@ -1179,12 +1179,12 @@ static int pool_has_free_space(struct device_set *devset)
 
     data_free = data_total - data_used;
     if (data_free < min_free_data) {
-        ERROR("devmapper: Thin Pool has %lu free data blocks which is less than minimum required "
-              "%lu free data blocks. Create more free space in thin pool or use dm.min_free_space option to change behavior",
+        ERROR("devmapper: Thin Pool has %" PRIu64 " free data blocks which is less than minimum required "
+              "%" PRIu64 " free data blocks. Create more free space in thin pool or use dm.min_free_space option to change behavior",
               data_total - data_used, min_free_data);
         isulad_set_error_message(
-            "devmapper: Thin Pool has %lu free data blocks which is less than minimum required "
-            "%lu free data blocks. Create more free space in thin pool or use dm.min_free_space option to change behavior",
+            "devmapper: Thin Pool has %" PRIu64 " free data blocks which is less than minimum required "
+            "%" PRIu64 " free data blocks. Create more free space in thin pool or use dm.min_free_space option to change behavior",
             data_total - data_used, min_free_data);
         ret = -1;
         goto out;
@@ -1198,12 +1198,12 @@ static int pool_has_free_space(struct device_set *devset)
     metadata_free = metadata_total - metadata_used;
     if (metadata_free < min_free_metadata) {
-        ERROR("devmapper: Thin Pool has %lu free metadata blocks "
-              "which is less than minimum required %lu free metadata blocks. "
+        ERROR("devmapper: Thin Pool has %" PRIu64 " free metadata blocks "
+              "which is less than minimum required %" PRIu64 " free metadata blocks. "
               "Create more free metadata space in thin pool or use dm.min_free_space option to change behavior",
               metadata_total - metadata_used, min_free_metadata);
         isulad_set_error_message(
-            "devmapper: Thin Pool has %lu free metadata blocks "
-            "which is less than minimum required %lu free metadata blocks. "
+            "devmapper: Thin Pool has %" PRIu64 " free metadata blocks "
+            "which is less than minimum required %" PRIu64 " free metadata blocks. "
             "Create more free metadata space in thin pool or use dm.min_free_space option to change behavior",
             metadata_total - metadata_used, min_free_metadata);
         ret = -1;
@@ -2017,7 +2017,7 @@ static int check_thin_pool(struct device_set *devset)
         goto out;
     }
 
-    DEBUG("devmapper:total_size_in_sectors:%lu, data_total:%lu, metadata_used:%lu, metadata_total:%lu",
+    DEBUG("devmapper:total_size_in_sectors:%" PRIu64 ", data_total:%" PRIu64 ", metadata_used:%" PRIu64 ", metadata_total:%" PRIu64,
           total_size_in_sectors, data_total, metadata_used, metadata_total);
 
 out:
@@ -2223,7 +2223,7 @@ static int check_grow_base_device_fs(struct device_set *devset, image_devmapper_
 
     base_dev_size = get_base_device_size(devset);
     if (devset->base_fs_size < base_dev_size) {
-        ERROR("devmapper: Base fs size:%lu cannot be smaller than %lu", devset->base_fs_size, base_dev_size);
+        ERROR("devmapper: Base fs size:%" PRIu64 " cannot be smaller than %" PRIu64, devset->base_fs_size, base_dev_size);
         return -1;
     }
 
@@ -2726,8 +2726,8 @@ static int determine_driver_capabilities(const char *version, struct device_set
     }
 
     if (major < 4) {
-        ERROR("devicamapper driver version:(%ld.xxx) < 4.27.0, do not surpport deferred removal", major);
-        isulad_set_error_message("devicamapper driver version:(%ld.xxx) < 4.27.0, do not surpport deferred removal",
+        ERROR("devicamapper driver version:(%" PRId64 ".xxx) < 4.27.0, do not surpport deferred removal", major);
+        isulad_set_error_message("devicamapper driver version:(%" PRId64 ".xxx) < 4.27.0, do not surpport deferred removal",
                                  major);
         ret = -1;
         goto out;
@@ -2749,8 +2749,8 @@ static int determine_driver_capabilities(const char *version, struct device_set
      * check for patch level as it can not be less than 0.
      */
     if (minor < 27) {
-        ERROR("devicamapper driver version (4.%ld) < 4.27.0, , do not surpport deferred removal", minor);
-        isulad_set_error_message("devicamapper driver version (4.%ld) < 4.27.0, , do not surpport deferred removal",
+        ERROR("devicamapper driver version (4.%" PRId64 ") < 4.27.0, , do not surpport deferred removal", minor);
+        isulad_set_error_message("devicamapper driver version (4.%" PRId64 ") < 4.27.0, , do not surpport deferred removal",
                                  minor);
         ret = -1;
         goto out;
@@ -3003,8 +3003,8 @@ int add_device(const char *hash, const char *base_hash, struct device_set *devse
     }
 
     if (size < base_device_info->info->size) {
-        ERROR("devmapper: Container size:%lu cannot be smaller than %lu", size, base_device_info->info->size);
-        isulad_set_error_message("Container size cannot be smaller than %lu", base_device_info->info->size);
+        ERROR("devmapper: Container size:%" PRIu64 "cannot be smaller than %" PRIu64, size, base_device_info->info->size);
+        isulad_set_error_message("Container size cannot be smaller than %" PRIu64, base_device_info->info->size);
         ret = -1;
         goto free_out;
     }
diff --git a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/wrapper_devmapper.c b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/wrapper_devmapper.c
index fc22bcf..4e5ddab 100644
--- a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/wrapper_devmapper.c
+++ b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/wrapper_devmapper.c
@@ -1157,7 +1157,7 @@ int dev_set_transaction_id(const char *pool_name, uint64_t old_id, uint64_t new_
         goto cleanup;
     }
 
-    nret = snprintf(message, sizeof(message), "set_transaction_id %lu %lu", old_id, new_id);
+    nret = snprintf(message, sizeof(message), "set_transaction_id %" PRIu64 "%" PRIu64, old_id, new_id);
     if (nret < 0 || (size_t)nret >= sizeof(message)) {
         ERROR("devicemapper:print set_transaction_id message failed");
         ret = -1;
diff --git a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/quota/project_quota.c b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/quota/project_quota.c
index fa247b2..36b39c6 100644
--- a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/quota/project_quota.c
+++ b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/quota/project_quota.c
@@ -149,7 +149,7 @@ static int ext4_set_quota(const char *target, struct pquota_control *ctrl, uint6
     }
     ctrl->next_project_id++;
 
-    EVENT("Set directory %s project ID:%u quota size: %lu", target, project_id, size);
+    EVENT("Set directory %s project ID:%u quota size: %" PRIu64, target, project_id, size);
 
     if (ext4_set_project_quota(ctrl->backing_fs_device, project_id, size) != 0) {
         ERROR("Failed to set project id %d to %s.", project_id, target);
@@ -204,7 +204,7 @@ static int xfs_set_quota(const char *target, struct pquota_control *ctrl, uint64
     }
     ctrl->next_project_id++;
 
-    EVENT("Set directory %s project ID:%u quota size: %lu", target, project_id, size);
+    EVENT("Set directory %s project ID:%u quota size: %" PRIu64, target, project_id, size);
 
     if (xfs_set_project_quota(ctrl->backing_fs_device, project_id, size) != 0) {
         ERROR("Failed to set project id %d to %s.", project_id, target);
diff --git a/src/daemon/modules/image/oci/storage/layer_store/layer_store.c b/src/daemon/modules/image/oci/storage/layer_store/layer_store.c
index 4edd0ca..f6de549 100644
--- a/src/daemon/modules/image/oci/storage/layer_store/layer_store.c
+++ b/src/daemon/modules/image/oci/storage/layer_store/layer_store.c
@@ -1088,7 +1088,7 @@ static int apply_diff(layer_t *l, const struct io_read_wrapper *diff)
     // uncompress digest get from up caller
     ret = make_tar_split_file(l->slayer->id, diff, &size);
 
-    INFO("Apply layer get size: %ld", size);
+    INFO("Apply layer get size: %" PRId64, size);
     l->slayer->diff_size = size;
 
 out:
diff --git a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/overlay2/driver_overlay2.c b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/overlay2/driver_overlay2.c
index eedbeef..0158fff 100644
--- a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/overlay2/driver_overlay2.c
+++ b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/overlay2/driver_overlay2.c
@@ -845,8 +845,8 @@ static int set_layer_quota(const char *dir, const json_map_string_string *opts,
     }
 
     if (quota > 0 && quota < 4096) {
-        ERROR("Illegal storage quota size %lu, 4096 at least", quota);
-        isulad_set_error_message("Illegal storage quota size %lu, 4096 at least", quota);
+        ERROR("Illegal storage quota size %" PRIu64 ", 4096 at least", quota);
+        isulad_set_error_message("Illegal storage quota size %" PRIu64 ", 4096 at least", quota);
         ret = -1;
         goto out;
     }
diff --git a/src/daemon/modules/image/oci/storage/image_store/image_store.c b/src/daemon/modules/image/oci/storage/image_store/image_store.c
index 84187de..99fd1ae 100644
--- a/src/daemon/modules/image/oci/storage/image_store/image_store.c
+++ b/src/daemon/modules/image/oci/storage/image_store/image_store.c
@@ -3170,13 +3170,13 @@ static int get_layers_from_manifest(const registry_manifest_schema1 *manifest, l
     size_t j = 0;
 
     if (manifest->fs_layers_len > MAX_LAYER_NUM || manifest->fs_layers_len == 0) {
-        ERROR("Invalid layer number %ld, maxium is %d and it can't be 0", manifest->fs_layers_len, MAX_LAYER_NUM);
+        ERROR("Invalid layer number %zu, maxium is %d and it can't be 0", manifest->fs_layers_len, MAX_LAYER_NUM);
         ret = -1;
         goto out;
     }
 
     if (manifest->fs_layers_len != manifest->history_len) {
-        ERROR("Invalid layer number %ld do not match history number %ld", manifest->fs_layers_len,
+        ERROR("Invalid layer number %zu do not match history number %zu", manifest->fs_layers_len,
               manifest->history_len);
         ret = -1;
         goto out;
diff --git a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/driver_devmapper.c b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/driver_devmapper.c
index 900c940..c57c1df 100644
--- a/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/driver_devmapper.c
+++ b/src/daemon/modules/image/oci/storage/layer_store/graphdriver/devmapper/driver_devmapper.c
@@ -18,6 +18,9 @@
 #include <stdlib.h>
 #include <limits.h>
 #include <stdio.h>
+#include <inttypes.h>
+
+#define __STDC_FORMAT_MACROS
 
 #include "isula_libutils/log.h"
 #include "utils.h"
@@ -506,7 +509,7 @@ static void status_append(const char *name, const char *value, uint64_t u_data,
                 free(human_size);
             } else {
                 // If unsigned long int is bigger than LONG_MAX, just print directly with Byte unit
-                nret = snprintf(tmp, MAX_INFO_LENGTH, "%s: %luB\n", name, u_data);
+                nret = snprintf(tmp, MAX_INFO_LENGTH, "%s: %" PRIu64 "B\n", name, u_data);
             }
             break;
         case INT:
@@ -514,7 +517,7 @@ static void status_append(const char *name, const char *value, uint64_t u_data,
             break;
         case UINT64_NONE:
             // Print without unit
-            nret = snprintf(tmp, MAX_INFO_LENGTH, "%s: %lu\n", name, u_data);
+            nret = snprintf(tmp, MAX_INFO_LENGTH, "%s: %" PRIu64 "\n", name, u_data);
         default:
             break;
     }
diff --git a/src/daemon/modules/image/oci/storage/storage.c b/src/daemon/modules/image/oci/storage/storage.c
index 81382bf..ec58c41 100644
--- a/src/daemon/modules/image/oci/storage/storage.c
+++ b/src/daemon/modules/image/oci/storage/storage.c
@@ -24,6 +24,9 @@
 #include <isula_libutils/imagetool_images_list.h>
 #include <isula_libutils/storage_rootfs.h>
 #include <pthread.h>
+#include <inttypes.h>
+
+#define __STDC_FORMAT_MACROS
 
 #include "io_wrapper.h"
 #include "utils.h"
@@ -919,7 +922,7 @@ int storage_img_set_image_size(const char *image_id)
     }
 
     if (image_store_set_image_size(image_id, (uint64_t)image_size) != 0) {
-        ERROR("Failed to set image %s size %lu", image_id, (uint64_t)image_size);
+        ERROR("Failed to set image %s size %" PRIu64, image_id, (uint64_t)image_size);
         ret = -1;
         goto out;
     }

