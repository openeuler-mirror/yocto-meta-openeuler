-- a/src/lxc/macro.h
+++ b/src/lxc/macro.h
@@ -8,6 +8,7 @@
 #include <asm/types.h>
 #include <limits.h>
 #include <linux/if_link.h>
+#include <linux/ioctl.h>
 #include <linux/loop.h>
 #include <linux/netlink.h>
 #include <linux/rtnetlink.h>
@@ -812,4 +813,16 @@ static inline bool is_set(__u32 bit, __u

 #define BIT(nr) (1UL << (nr))

+#ifndef FS_IOC_GETFLAGS
+#define FS_IOC_GETFLAGS _IOR('f', 1, long)
+#endif
+
+#ifndef FS_IOC_SETFLAGS
+#define FS_IOC_SETFLAGS _IOW('f', 2, long)
+#endif
+
+#ifndef FS_IMMUTABLE_FL
+#define FS_IMMUTABLE_FL 0x00000010 /* Immutable file */
+#endif
+
 #endif /* __LXC_MACRO_H */
--- a/src/lxc/utils.c
+++ b/src/lxc/utils.c
@@ -19,8 +19,6 @@
 #include <string.h>
 #include <sys/mman.h>
 #include <sys/mount.h>
-/* Needs to be after sys/mount.h header */
-#include <linux/fs.h>
 #include <sys/param.h>
 #include <sys/prctl.h>
 #include <sys/stat.h>
@@ -238,7 +237,7 @@ int mkdir_p(const char *dir, mode_t mode)
        return 0;
 }
 
-char *get_rundir()
+char *get_rundir(void)
 {
        char *rundir;
        size_t len;
--- a/src/lxc/conf.c
+++ b/src/lxc/conf.c
@@ -3657,7 +3657,9 @@ static bool verify_start_hooks(struct lxc_conf *conf)
 
 static bool execveat_supported(void)
 {
-	execveat(-1, "", NULL, NULL, AT_EMPTY_PATH);
+	char *argv[1] = {NULL};
+	char *envp[1] = {NULL};
+	execveat(-1, "", argv, envp, AT_EMPTY_PATH);
 	if (errno == ENOSYS)
 		return false;

--- a/src/lxc/json/json_common.c
+++ b/src/lxc/json/json_common.c
@@ -765,7 +765,11 @@ int append:json_map_int_string(json_map_int_string *map, int key, const char *va
         return -1;
     }
 
-    if ((SIZE_MAX / sizeof(int) - 1) < map->len || (SIZE_MAX / sizeof(char *) - 1) < map->len) {
+    if ((SIZE_MAX / sizeof(int) - 1) < map->len) {
+        return -1;
+    }
+
+    if ((SIZE_MAX / sizeof(char *) - 1) < map->len) {
         return -1;
     }
 
@@ -887,7 +891,11 @@ int append:json_map_string_int(json_map_string_int *map, const char *key, int va
         return -1;
     }
 
-    if ((SIZE_MAX / sizeof(char *) - 1) < map->len || (SIZE_MAX / sizeof(int) - 1) < map->len) {
+    if ((SIZE_MAX / sizeof(char *) - 1) < map->len) {
+        return -1;
+    }
+
+    if ((SIZE_MAX / sizeof(int) - 1) < map->len) {
         return -1;
     }
  
