# We have a conf and classes directory, add to BBPATH
BBPATH =. "${LAYERDIR}:"

# We have recipes-* directories, add to BBFILES
BBFILES += "${LAYERDIR}/recipes-*/*/*.bb \
            ${LAYERDIR}/recipes-*/*/*.bbappend"

BBFILE_COLLECTIONS += "openeuler"
BBFILE_PATTERN_openeuler = "^${LAYERDIR}/"
BBFILE_PRIORITY_openeuler = "30"

LAYERSERIES_COMPAT_openeuler = "kirkstone"

# This should only be incremented on significant changes that will
# cause compatibility issues with other layers
LAYERVERSION_openeuler = "13"

LAYERDEPENDS_openeuler = "core"

REQUIRED_POKY_BBLAYERS_CONF_VERSION = "2"

# The dynamic-layers directory hosts the extensions and layer specific
# modifications.
#
# The .bbappend and .bb files are included if the respective layer
# collection is available.
BBFILES_DYNAMIC += " \
openembedded-layer:${LAYERDIR}/dynamic-layers/openembedded-layer/recipes-*/*/*.bb \
openembedded-layer:${LAYERDIR}/dynamic-layers/openembedded-layer/recipes-*/*/*.bbappend \
multimedia-layer:${LAYERDIR}/dynamic-layers/multimedia-layer/recipes-*/*/*.bb \
multimedia-layer:${LAYERDIR}/dynamic-layers/multimedia-layer/recipes-*/*/*.bbappend \
meta-python:${LAYERDIR}/dynamic-layers/meta-python/recipes-*/*/*.bb \
meta-python:${LAYERDIR}/dynamic-layers/meta-python/recipes-*/*/*.bbappend \
networking-layer:${LAYERDIR}/dynamic-layers/networking-layer/recipes-*/*/*.bb \
networking-layer:${LAYERDIR}/dynamic-layers/networking-layer/recipes-*/*/*.bbappend \
qt5-layer:${LAYERDIR}/dynamic-layers/qt5-layer/recipes-*/*/*.bb \
qt5-layer:${LAYERDIR}/dynamic-layers/qt5-layer/recipes-*/*/*.bbappend \
"

# enable .bb under clang-layer/ when exist meta-clang
BBFILES_DYNAMIC += " \
clang-layer:${LAYERDIR}/dynamic-layers/clang-layer/recipes-*/*/*.bb \
clang-layer:${LAYERDIR}/dynamic-layers/clang-layer/recipes-*/*/*.bbappend \
"

# enable .bb under ros2-layer/ when exist meta-ros
BBFILES_DYNAMIC += " \
ros2-layer:${LAYERDIR}/dynamic-layers/ros2-layer/recipes-*/*/*.bb \
ros2-layer:${LAYERDIR}/dynamic-layers/ros2-layer/recipes-*/*/*.bbappend \
"

# enable .bb under phosphor-layer/ when exist meta-phosphor
BBFILES_DYNAMIC += " \
phosphor-layer:${LAYERDIR}/dynamic-layers/phosphor-layer/recipes-*/*/*.bb \
phosphor-layer:${LAYERDIR}/dynamic-layers/phosphor-layer/recipes-*/*/*.bbappend \
"

# For get lib dir under meta-openeuler by external_run
LAYERDIR_openeuler = "${LAYERDIR}"
# These will rebuild when EXTERNAL_TOOLCHAIN changes, but we don't want
# everything to rebuild in such a case.
SIGGEN_EXCLUDERECIPES_ABISAFE += "\
    gcc-external-cross \
    gcc-external-cross-${TARGET_ARCH} \
    binutils-external-cross  \
    binutils-external-cross-${TARGET_ARCH} \
"

# add openeuler related licenses
LICENSE_PATH += "${LAYERDIR}/licenses"

# Needed for external_run() for PV & LICENSE in the recipes, to be able to parse
INHERIT:append = " external_global"

# Fallback default for when the tcmode isn't sourced
GCC_VERSION ?= "0.0"

# open or close OPENFULER_FETCH function through seting global param OPENEULER_FETCH
# default enable for opening or you set it disable for closing
# if you want to build with your own src code, you can set OPENEULER_FETCH disable, thus
# it will not download or fetch automatic anymore when compilling, you also can set it in 
# your repo bb or bbappend file. 
# for example, you can set it enable global and set it disable in some one repo's bb or 
# bbappend file, when running compile, the other repo will run openeuler_fetch continue and
# the repo you set it OPENEULER_FETCH disable will not do it
OPENEULER_FETCH = "enable"

# openeuler decoupled ros runtime package but in meta-ros blacklist, so we remove from blacklist here:
require openeuler-ros-distro-recipe-blacklist.inc
