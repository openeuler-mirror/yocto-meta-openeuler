def BUILD_COM
def IMAGE_DATE = ""

pipeline {
    agent any
    environment {
        PATH = "/home/jenkins/.local/bin:${env.PATH}"
    }
    stages {
        stage("init task"){
            steps{
                dir("${env.WORKSPACE}"){
                    stash(name: "scm")
                }
                script{
                    node("${node}"){
                        dir("/home/jenkins/agent/scm"){
                            unstash(name: "scm")
                            BUILD_COM = load '.oebuild/workflows/build_common.groovy'
                            IMAGE_DATE = BUILD_COM.getNowDatetime()
                            INIT_ENV = load '.oebuild/workflows/init_env.groovy'
                            INIT_ENV.init_environment()
                        } 
                        dir('/home/jenkins/agent'){
                            BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            def repoRemote = "https://gitee.com/$giteeTargetNamespace/$giteeRepoName"
                            BUILD_COM.downloadYoctoWithPr(
                                "/home/jenkins/agent",
                                repoRemote,
                                Integer.parseInt(giteePullRequestid),
                                Integer.parseInt(commitCount))
                        }
                        BUILD_COM.stashRepo('/home/jenkins/agent', 'embedded-ci')
                        BUILD_COM.stashRepo('/home/jenkins/agent', 'yocto-meta-openeuler')
                    }
                }
            }
        }
        stage("pre") {
            steps {
                script{
                    node("${node}"){
                        BUILD_COM.unstashRepo('/home/jenkins/agent', 'embedded-ci')
                        dir('/home/jenkins/agent/embedded-ci'){
                            withCredentials([
                            string(credentialsId: "${giteeId}", variable: 'GITEETOKEN'),
                            usernamePassword(credentialsId: "${jenkinsId}", usernameVariable: 'JUSER',passwordVariable: 'JPASSWD')]){
                                // 执行pre
                                sh """
                                    python3 main.py pre \
                                        -s $shareDir \
                                        -o $giteeTargetNamespace \
                                        -p $giteeRepoName \
                                        -pr $giteePullRequestid \
                                        -juser $JUSER \
                                        -jpwd $JPASSWD \
                                        -gt $GITEETOKEN
                                """
                                // 执行pr_check
                                env.pr_check_result = sh (script: """
                                    python3 main.py pr_check \
                                        -o $giteeTargetNamespace \
                                        -p $giteeRepoName \
                                        -pr $giteePullRequestid \
                                        -gt $GITEETOKEN
                                """, returnStdout: true).trim()
                            }
                        }
                    }
                }
            }
        }
        stage("code check"){
            steps {
                script{
                    node("${node}"){
                        BUILD_COM.unstashRepo('/home/jenkins/agent', 'embedded-ci')
                        BUILD_COM.unstashRepo('/home/jenkins/agent', 'yocto-meta-openeuler')
                        def logDir = BUILD_COM.AGENT+"/"+BUILD_COM.LOG_DIR
                        dir('/home/jenkins/agent/embedded-ci'){
                            // check commit_msg
                            withCredentials([string(credentialsId: "${giteeId}", variable: 'GITEETOKEN')]){
                                def randomStr = BUILD_COM.getRandomStr()
                                BUILD_COM.mkdirOpeneulerLog()
                                // 执行commit检查
                                def taskResCode = sh (script: """
                                    python3 main.py codecheck \
                                    -c /home/jenkins/agent/yocto-meta-openeuler \
                                    -target commit_msg \
                                    -o $giteeTargetNamespace \
                                    -p $giteeRepoName \
                                    -gt $GITEETOKEN \
                                    -pr $giteePullRequestid > ${logDir}/${randomStr}.log
                                """, returnStatus: true)
                                def checkRes = ""
                                if (taskResCode == 0){
                                    checkRes = "success"
                                }else{
                                    checkRes = "failed"
                                    env.code_check_result = "failed"
                                }
                                // 对检查赋值
                                // env.task_check_commit = formatRes("check", "commit_check", check_res, "xxx")
                                BUILD_COM.artifactsLogs()
                                BUILD_COM.STAGES_RES.push(
                                    BUILD_COM.formatRes(
                                        "check",
                                        "commit_check",
                                        checkRes,
                                        "artifact/${BUILD_COM.LOG_DIR}/${randomStr}.log"))
                            }
                            // check commit_scope
                            withCredentials([string(credentialsId: "${giteeId}", variable: 'GITEETOKEN')]){
                                // 执行scope检查
                                def randomStr = BUILD_COM.getRandomStr()
                                BUILD_COM.mkdirOpeneulerLog()
                                // 执行commit检查
                                def taskResCode = sh (script: """
                                    python3 main.py codecheck \
                                    -target commit_scope \
                                    -o $giteeTargetNamespace \
                                    -p $giteeRepoName \
                                    -gt $GITEETOKEN \
                                    -pr $giteePullRequestid > ${logDir}/${randomStr}.log
                                """, returnStatus: true)
                                def checkRes = ""
                                if (taskResCode == 0){
                                    checkRes = "success"
                                }else{
                                    checkRes = "failed"
                                    env.code_check_result = "failed"
                                }
                                // 对检查赋值
                                // env.task_check_scope = formatRes("check", "scope_check", check_res, "xxx")
                                BUILD_COM.artifactsLogs()
                                BUILD_COM.STAGES_RES.push(
                                    BUILD_COM.formatRes(
                                        "check",
                                        "scope_check",
                                        checkRes,
                                        "artifact/${BUILD_COM.LOG_DIR}/${randomStr}.log"))
                            }
                        }
                    }
                }
            }
        }
        stage("build check"){
            when {
                expression {
                    return env.code_check_result != "failed"
                }
            }
            parallel {
                stage("docs"){
                    when {
                        expression {
                            return env.pr_check_result.contains("docs")
                        }
                    }
                    steps{
                        script{
                            node("${node}"){
                                BUILD_COM.unstash('/home/jenkins/agent', 'embedded-ci')
                                BUILD_COM.unstash('/home/jenkins/agent', 'yocto-meta-openeuler')
                                def logDir = BUILD_COM.AGENT+"/"+BUILD_COM.LOG_DIR
                                dir('/home/jenkins/agent/embedded-ci'){
                                    // 执行docs编译
                                    def randomStr = BUILD_COM.getRandomStr()
                                    BUILD_COM.mkdirOpeneulerLog()
                                    // 执行文档编译检查
                                    def taskResCode = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_doc > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    def checkRes = ""
                                    if (taskResCode == 0){
                                        checkRes = "success"
                                    }else{
                                        checkRes = "failed"
                                    }
                                    // 对检查赋值
                                    // env.task_build_docs = formatRes("docs", "build", check_res, "xxx")
                                    BUILD_COM.artifactsLogs()
                                    BUILD_COM.STAGES_RES.push(
                                        BUILD_COM.formatRes(
                                            "docs",
                                            "build",
                                            checkRes,
                                            "artifact/${BUILD_COM.LOG_DIR}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("qemu-aarch64"){
                    when {
                        expression {
                            return env.pr_check_result.contains("code")
                        }
                    }
                    steps {
                        script{
                            node("${node}"){
                                BUILD_COM.unstashRepo('/home/jenkins/agent', 'embedded-ci')
                                BUILD_COM.unstashRepo('/home/jenkins/agent', 'yocto-meta-openeuler')
                                dir('/home/jenkins/agent/embedded-ci'){
                                    // 执行qemu-aarch64编译
                                    def randomStr = BUILD_COM.getRandomStr()
                                    def cacheSrcDir = "$shareDir/$giteeTargetBranch/oebuild_workspace/src"
                                    def yoctoDir = "/home/jenkins/agent/yocto-meta-openeuler"
                                    BUILD_COM.mkdirOpeneulerLog()
                                    // 执行镜像编译检查
                                    BUILD_COM.dynamicBuild(yoctoDir,
                                                        "aarch64",
                                                        "qemu-aarch64",
                                                        IMAGE_DATE,
                                                        randomStr,
                                                        cacheSrcDir)
                                }
                            }
                        }
                    }
                }
                stage("qemu-arm32"){
                    when {
                        expression {
                            return env.pr_check_result.contains("code")
                        }
                    }
                    steps {
                        script{
                            node("${node}"){
                                BUILD_COM.unstashRepo('/home/jenkins/agent', 'embedded-ci')
                                BUILD_COM.unstashRepo('/home/jenkins/agent', 'yocto-meta-openeuler')
                                dir('/home/jenkins/agent/embedded-ci'){
                                    // 执行qemu-arm32编译
                                    def randomStr = BUILD_COM.getRandomStr()
                                    def cacheSrcDir = "$shareDir/$giteeTargetBranch/oebuild_workspace/src"
                                    def yoctoDir = "/home/jenkins/agent/yocto-meta-openeuler"
                                    BUILD_COM.mkdirOpeneulerLog()
                                    // 执行镜像编译检查
                                    BUILD_COM.dynamicBuild(yoctoDir,
                                                        "arm32",
                                                        "qemu-arm32",
                                                        IMAGE_DATE,
                                                        randomStr,
                                                        cacheSrcDir)
                                }
                            }
                        }
                    }
                }
                stage("x86-64"){
                    when {
                        expression {
                            return env.pr_check_result.contains("code")
                        }
                    }
                    steps {
                        script{
                            node("${node}"){
                                BUILD_COM.unstashRepo('/home/jenkins/agent', 'embedded-ci')
                                BUILD_COM.unstashRepo('/home/jenkins/agent', 'yocto-meta-openeuler')
                                dir('/home/jenkins/agent/embedded-ci'){
                                    // 执行qemu-arm32编译
                                    def randomStr = BUILD_COM.getRandomStr()
                                    def cacheSrcDir = "$shareDir/$giteeTargetBranch/oebuild_workspace/src"
                                    def yoctoDir = "/home/jenkins/agent/yocto-meta-openeuler"
                                    BUILD_COM.mkdirOpeneulerLog()
                                    // 执行镜像编译检查
                                    BUILD_COM.dynamicBuild(yoctoDir,
                                                        "x86-64",
                                                        "x86-64",
                                                        IMAGE_DATE,
                                                        randomStr,
                                                        cacheSrcDir)
                                }
                            }
                        }
                    }
                }
                stage("hieulerpi1"){
                    when {
                        expression {
                            return env.pr_check_result.contains("code")
                        }
                    }
                    steps {
                        script{
                            node("${node}"){
                                BUILD_COM.unstashRepo('/home/jenkins/agent', 'embedded-ci')
                                BUILD_COM.unstashRepo('/home/jenkins/agent', 'yocto-meta-openeuler')
                                dir('/home/jenkins/agent/embedded-ci'){
                                    // 执行qemu-arm32编译
                                    def randomStr = BUILD_COM.getRandomStr()
                                    def cacheSrcDir = "$shareDir/$giteeTargetBranch/oebuild_workspace/src"
                                    def yoctoDir = "/home/jenkins/agent/yocto-meta-openeuler"
                                    BUILD_COM.mkdirOpeneulerLog()
                                    // 执行镜像编译检查
                                    BUILD_COM.dynamicBuild(yoctoDir,
                                                        "aarch64",
                                                        "hieulerpi1",
                                                        IMAGE_DATE,
                                                        randomStr,
                                                        cacheSrcDir)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script{
                node("${node}"){
                    BUILD_COM.unstashRepo('/home/jenkins/agent', 'embedded-ci')
                    dir('/home/jenkins/agent/embedded-ci'){
                        withCredentials([
                            string(credentialsId: "${giteeId}", variable: 'GITEETOKEN'),
                            usernamePassword(credentialsId: "${jenkinsId}", usernameVariable: 'JUSER',passwordVariable: 'JPASSWD')]){
                                if (currentBuild.result != 'ABORTED') {
                                    def chks = ""
                                    for (int i = 0; i < BUILD_COM.STAGES_RES.size(); ++i) {
                                        chks = "${chks} -chk ${BUILD_COM.STAGES_RES[i]}"
                                    }

                                    def durationTime = System.currentTimeMillis() - currentBuild.startTimeInMillis
                                    sh """
                                    python3 main.py comment \
                                        -m gate \
                                        -o $giteeTargetNamespace \
                                        -p $giteeRepoName \
                                        -pr $giteePullRequestid \
                                        -gt $GITEETOKEN \
                                        -dt $durationTime \
                                        $chks
                                    """
                                }
                        }
                    }
                }
            }
        }
    }
}
