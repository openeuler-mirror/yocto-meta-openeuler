// this jenkinsfile is for src code and gate sstate cache
def BUILD_COM
def IMAGE_DATE = ""

pipeline {
    agent { node "${node}" }
    environment {
        PATH = "/home/jenkins/.local/bin:${env.PATH}"
    }
    stages {
        stage("init-task"){
            steps{
                script{
                    BUILD_COM = load '.oebuild/workflows/build_common.groovy'
                    IMAGE_DATE = BUILD_COM.getNowDatetime()
                }
                dir('/home/jenkins/agent'){
                    script{
                        BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                    }
                }
                dir('/home/jenkins/agent/embedded-ci'){
                    script{
                        //下载yocto-meta-openeuler代码
                        BUILD_COM.downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)        
                    }
                }
                dir('/home/jenkins/agent/embedded-ci'){
                    stash(name: 'embedded-ci')
                }
                dir('/home/jenkins/agent/yocto-meta-openeuler'){
                    sh "mv .git .git_bak"
                    stash(name: 'yocto-meta-openeuler')
                    sh "mv .git_bak .git"
                }
            }
        }
        stage("build task"){
            parallel {
                stage("qemu-aarch64"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                sh "mkdir embedded-ci"
                                sh "mkdir yocto-meta-openeuler"
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                        }
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            unstash(name: "yocto-meta-openeuler")
                            sh "mv .git_bak .git"
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                BUILD_COM.prepareSrcCode("/home/jenkins")
                                def random_str = BUILD_COM.getRandomStr()
                                BUILD_COM.mkdirOpeneulerLog()

                                image_name = "aarch64/qemu-aarch64"
                                image_split = image_name.split("/")
                                yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                                BUILD_COM.dynamicBuild(yocto_dir, image_split[0], image_split[1], IMAGE_DATE, log_dir, random_str)
                                BUILD_COM.artifactsLogs()
                            }
                        }
                    }
                }
                stage("qemu-arm"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                sh "mkdir embedded-ci"
                                sh "mkdir yocto-meta-openeuler"
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                        }
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            unstash(name: "yocto-meta-openeuler")
                            sh "mv .git_bak .git"
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                BUILD_COM.prepareSrcCode("/home/jenkins")
                                def random_str = BUILD_COM.getRandomStr()
                                BUILD_COM.mkdirOpeneulerLog()
                                
                                // 执行qemu-arm镜像编译检查
                                image_name = "arm32/qemu-arm"
                                image_split = image_name.split("/")
                                yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                                BUILD_COM.dynamicBuild(yocto_dir, image_split[0], image_split[1], IMAGE_DATE, log_dir, random_str)
                                BUILD_COM.artifactsLogs()
                            }
                        }
                    }
                }
                stage("x86-64"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                sh "mkdir embedded-ci"
                                sh "mkdir yocto-meta-openeuler"
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                        }
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            unstash(name: "yocto-meta-openeuler")
                            sh "mv .git_bak .git"
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                BUILD_COM.prepareSrcCode("/home/jenkins")
                                def random_str = BUILD_COM.getRandomStr()
                                BUILD_COM.mkdirOpeneulerLog()
                                
                                // 执行x86-64镜像编译检查
                                image_name = "x86-64/x86-64"
                                image_split = image_name.split("/")
                                yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                                BUILD_COM.dynamicBuild(yocto_dir, image_split[0], image_split[1], IMAGE_DATE, log_dir, random_str)
                                BUILD_COM.artifactsLogs()
                            }
                        }
                    }
                }
                stage("hieulerpi1"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                sh "mkdir embedded-ci"
                                sh "mkdir yocto-meta-openeuler"
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                        }
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            unstash(name: "yocto-meta-openeuler")
                            sh "mv .git_bak .git"
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                BUILD_COM.prepareSrcCode("/home/jenkins")
                                def random_str = BUILD_COM.getRandomStr()
                                BUILD_COM.mkdirOpeneulerLog()

                                // 执行hieulerpi1镜像编译检查
                                image_name = "aarch64/hieulerpi1"
                                image_split = image_name.split("/")
                                yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                                BUILD_COM.dynamicBuild(yocto_dir, image_split[0], image_split[1], IMAGE_DATE, log_dir, random_str)
                                BUILD_COM.artifactsLogs()
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            dir('/home/jenkins/agent/embedded-ci'){
                script{
                    withCredentials([
                        string(credentialsId: "${giteeId}", variable: 'GITEETOKEN')
                    ]){
                        def chks = ""
                        for (int i = 0; i < BUILD_COM.STAGES_RES.size(); ++i) {
                            chks = "${chks} -chk ${BUILD_COM.STAGES_RES[i]}"
                        }
                        sh """
                        python3 main.py comment \
                             -m ci \
                             -o ${repoNamespace} \
                             -p ${commentRepoName} \
                             -b ${ciBranch} \
                             -gt ${GITEETOKEN} \
                             ${chks}
                        """
                    }
                }
            }
        }
    }
}
