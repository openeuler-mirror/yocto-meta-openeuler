def BUILD_COM
def IMAGE_DATE = ""

pipeline {
    agent { node "${node}" }
    environment {
        PATH = "/home/jenkins/.local/bin:${env.PATH}"
    }
    stages {
        stage("prepare environment"){
            steps {
                script{
                    BUILD_COM = load '.oebuild/workflows/build_common.groovy'
                    IMAGE_DATE = BUILD_COM.getNowDatetime()
                }
                dir('/home/jenkins/agent'){
                    //下载embedded-ci代码
                    BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                }
                dir('/home/jenkins/agent/embedded-ci'){
                    //下载yocto-meta-openeuler代码
                    BUILD_COM.downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                }
            }
        }
        stage("build image"){
            steps {
                dir('/home/jenkins/agent/embedded-ci'){
                    script{
                        withCredentials([
                            file(credentialsId: remoteID, variable: 'remoteKey')
                        ]){
                            BUILD_COM.prepareSrcCode("/home/jenkins")
                            def random_str = BUILD_COM.getRandomStr()
                            BUILD_COM.mkdirOpeneulerLog()

                            println "build ${imageName} ..."
                            image_split = imageName.split("/")
                            yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                            BUILD_COM.dynamicBuild(yocto_dir, image_split[0], image_split[1], IMAGE_DATE, log_dir, random_str)
                            BUILD_COM.artifactsLogs()
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            dir('/home/jenkins/agent/embedded-ci'){
                script{
                    withCredentials([
                        string(credentialsId: "${giteeId}", variable: 'GITEETOKEN')
                    ]){
                        def chks = ""
                        for (int i = 0; i < BUILD_COM.STAGES_RES.size(); ++i) {
                            chks = "${chks} -chk ${BUILD_COM.STAGES_RES[i]}"
                        }
                        sh """
                        python3 main.py comment \
                             -m ci \
                             -o ${repoNamespace} \
                             -p ${commentRepoName} \
                             -b ${ciBranch} \
                             -gt ${GITEETOKEN} \
                             ${chks}
                        """
                    }
                }
            }
        }
    }
}
