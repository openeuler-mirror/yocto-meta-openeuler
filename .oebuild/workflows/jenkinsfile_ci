def BUILD_COM
def IMAGE_DATE = ""
def BUILD_IMGS

pipeline {
    agent any
    environment {
        PATH = "/home/jenkins/.local/bin:${env.PATH}"
    }
    stages {
        stage("init task"){
            steps{
                dir("${env.WORKSPACE}"){
                    stash(name: "scm")
                }
                script{
                    node("${node}"){
                        dir("/home/jenkins/agent/scm"){
                            unstash(name: "scm")
                            BUILD_COM = load '.oebuild/workflows/build_common.groovy'
                            IMAGE_DATE = BUILD_COM.getNowDatetime()
                            INIT_ENV = load '.oebuild/workflows/init_env.groovy'
                            INIT_ENV.init_environment()
                            BUILD_IMGS = BUILD_COM.split_build(env.buildImages, env.parallelNum)
                        } 
                        dir('/home/jenkins/agent'){
                            BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            BUILD_COM.downloadYoctoWithBranch("/home/jenkins/agent", yoctoRemote, yoctoBranch, 1)
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            stash(name: "embedded-ci")
                        }
                        // the stash will not include .git, so mv .git to .git_bak
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            sh "mv .git .git_bak"
                            stash(name: "yocto-meta-openeuler")
                            sh "mv .git_bak .git"
                        }
                    }
                }
            }
        }
        stage("build task"){
            parallel{
                stage("group1"){
                    when { expression { BUILD_IMGS.size() >= 1 } }
                    steps {
                        script{
                            node("${node}") {
                                BUILD_COM.buildTask(BUILD_IMGS[0], IMAGE_DATE)
                            }
                        }
                    }
                }
                stage("group2"){
                    when { expression { BUILD_IMGS.size() >= 2 } }
                    steps {
                        script{
                            node("${node}"){
                                BUILD_COM.buildTask(BUILD_IMGS[1], IMAGE_DATE)
                            }
                        }
                    }
                }
                stage("group3"){
                    when { expression { BUILD_IMGS.size() >= 3 } }
                    steps {
                        script{
                            node("${node}"){
                                BUILD_COM.buildTask(BUILD_IMGS[2], IMAGE_DATE)
                            }
                        }
                    }
                }
                stage("group4"){
                    when { expression { BUILD_IMGS.size() >= 4 } }
                    steps {
                        script{
                            node("${node}"){
                                BUILD_COM.buildTask(BUILD_IMGS[3], IMAGE_DATE)
                            }
                        }
                    }
                }
                stage("group5"){
                    when { expression { BUILD_IMGS.size() >= 5 } }
                    steps {
                        script{
                            node("${node}"){
                                BUILD_COM.buildTask(BUILD_IMGS[4], IMAGE_DATE)
                            }
                        }
                    }
                }
            }
        }
        stage("comment"){
            when {
                expression { env.isComment != null && env.isComment == "true" }
            }
            steps {
                script{
                    node("${node}"){
                        dir('/home/jenkins/agent'){
                            sh "mkdir -p embedded-ci"
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                            withCredentials([
                                string(credentialsId: "${giteeId}", variable: 'GITEETOKEN')
                            ]){
                                def chks = ""
                                for (int i = 0; i < BUILD_COM.STAGES_RES.size(); ++i) {
                                    chks = "${chks} -chk ${BUILD_COM.STAGES_RES[i]}"
                                }
                                sh """
                                python3 main.py comment \
                                    -m ci \
                                    -o ${commentNameSpace} \
                                    -p ${commentRepo} \
                                    -b ${ciBranch} \
                                    -gt ${GITEETOKEN} \
                                    ${chks}
                                """
                            }
                        }
                    }
                }
            }
        }
    }
}