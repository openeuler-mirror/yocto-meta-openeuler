def downloadEmbeddedCI(String remote_url, String branch){
    sh 'rm -rf embedded-ci'
    sh "git clone ${remote_url} -b ${branch} -v embedded-ci --depth=1"
}

def downloadYoctoWithBranch(String workspace, String namespace, String repo, String branch, Integer deepth){
    sh """
        python3 main.py clone_repo \
        -w ${workspace} \
        -r https://gitee.com/${namespace}/${repo} \
        -p ${repo} \
        -v ${branch} \
        -dp ${deepth}
    """
}

def formatRes(String name, String action, String check_res, String log_path){
    return sh (script: """
        python3 main.py serial \
            -c name=${name} \
            -c action=${action} \
            -c result=${check_res} \
            -c log_path=${log_path}
    """, returnStdout: true).trim()
}

def delete_build_dir(String build_dir){
    sh """
        rm -rf ${build_dir}
    """
}

def getRandomStr(){
    return sh(script: """
        cat /proc/sys/kernel/random/uuid
    """, returnStdout: true).trim()
}

def mkdirOpeneulerLog(){
    def logdir = "openeuler/log"
    sh "mkdir -p $logdir"
    return logdir
}

def getNowDatetime(){
    return sh(script: """
        date "+%Y%m%d%H%M%S"
    """, returnStdout: true).trim()
}

def uploadImageWithKey(String remote_ip, String remote_dir, String username, String remote_key, String local_dir){
    sh """
        python3 main.py put_to_dst \
        -t 0 \
        -ld $local_dir \
        -dd $remote_dir \
        -i $remote_ip \
        -u $username \
        -k $remote_key \
        -sign \
        -d
    """
}

def putSStateCacheToDst(String local_dir, String dst_dir){
    sh """
        python3 main.py put_to_dst \
        -t 1 \
        -dd $dst_dir \
        -ld $local_dir
    """
}

def handleAfterBuildImage(String stageName, String arch, Integer build_res_code, String logDir, String randomStr, String IMAGE_DATE, List<String> STAGES_RES){
    def build_res = "failed"
    def test_res = "failed"
    def test_res_code = 1
    if (build_res_code == 0){
        build_res = "success"
        //将镜像推送到公网服务器
        def remote_dir = remoteDir+"/${arch}/${stageName}"
        def local_dir = "~/oebuild_workspace/build/${stageName}/output/${IMAGE_DATE}/"
        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
        //将sstate-cache推送到共享磁盘
        //由于当前构建得sstate-cache中包含指向 sstate_origin_dir 中文件的软连接，故先复制为temp（复制时，遇到软连接默认复制软连接指向的真实文件），再删除源文件夹，最后mv操作
        def sstate_local_dir = "~/oebuild_workspace/build/${stageName}/sstate-cache"
        def sstate_dst_dir = "$SHARE_DIR/${ciBranch}/sstate-cache/${stageName}-temp"
        putSStateCacheToDst(sstate_local_dir, sstate_dst_dir)
        def sstate_origin_dir = "$SHARE_DIR/${ciBranch}/sstate-cache/${stageName}"
        sh (script: """
            rm -rf ${sstate_origin_dir}
            mv ${sstate_dst_dir} ${sstate_origin_dir}
        """
        )
        // 测试qemu镜像和x86镜像的构建产物
        if(stageName.contains("qemu") && !stageName.contains("riscv")){
            test_res_code = sh (script: """
                python3 main.py utest \
                -target openeuler_image \
                -a ${arch} \
                -td /home/jenkins/oebuild_workspace/build/${stageName} \
                -tm ${mugenRemote} \
                -tb ${mugenBranch} > ${logDir}/Test-${stageName}-${randomStr}.log
            """, returnStatus: true)
            if (test_res_code == 0){
                test_res = "success"
            }
        }
    }
    // 对检查赋值
    archiveArtifacts "${logDir}/*.log"
    STAGES_RES.push(formatRes(stageName, "build", build_res, "artifact/${logDir}/Build-${stageName}-${randomStr}.log"))
    if (build_res_code == 0 && (stageName.contains("qemu") && !stageName.contains("riscv"))){
        STAGES_RES.push(formatRes(stageName, "test", test_res, "artifact/${logDir}/Test-${stageName}-${randomStr}.log"))
    }
}

def prepare_srccode(workspace){
    sh """
        if [[ -f "$SHARE_DIR/$ciBranch/src.tar.gz" ]]; then
            pushd ${workspace}
            oebuild init oebuild_workspace
            cd oebuild_workspace
            rm -rf build
            cp -f $SHARE_DIR/$ciBranch/src.tar.gz .
            tar zxf src.tar.gz
            popd
        fi
    """
}

def STAGES_RES = []

def IMAGE_DATE = ""

def BUILD_DIR_PRE = "/home/jenkins/oebuild_workspace/build/"

pipeline {
    agent { node "${node}" }
    environment {
        PATH = "/home/jenkins/.local/bin:${env.PATH}"
    }
    stages {
        stage("init task"){
            steps{
                dir('/home/jenkins/agent'){
                    script{
                        downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                        IMAGE_DATE = getNowDatetime()
                    }
                }
            }
        }
        stage("build task"){
            parallel {
                stage("ok3588 ok3568 qemu-aarch64-ros-mcs qemu-aarch64-llvm raspberrypi4-64-llvm"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    prepare_srccode("/home/jenkins")
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()

                                    // 执行ok3588镜像编译检查
                                    def stageName = "ok3588"
                                    def arch = "aarch64"
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p ok3588 \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行ok3568镜像编译检查
                                    stageName = "ok3568"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p ok3568 \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行qemu-aarch64-ros-mcs镜像编译检查
                                    stageName = "qemu-aarch64-ros-mcs"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p qemu-aarch64 \
                                        -f "openeuler-ros;openeuler-mcs" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行qemu-aarch64-llvm镜像编译检查
                                    stageName = "qemu-aarch64-llvm"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p qemu-aarch64 \
                                        -f "clang" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行raspberrypi4-64-llvm镜像编译检查
                                    stageName = "raspberrypi4-64-llvm"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -f "clang" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)
                                }
                            }
                        }
                    }
                }
                stage("qemu-aarch64-kernel6.6 raspberrypi4-64 raspberrypi4-64-kernel6.6 qemu-aarch64-kernel6.6-llvm raspberrypi4-64-kernel6.6-llvm"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    prepare_srccode("/home/jenkins")
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    
                                    // 执行qemu-aarch64-kernel6.6镜像编译检查
                                    def stageName = "qemu-aarch64-kernel6.6"
                                    def arch = "aarch64"
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p qemu-aarch64 \
                                        -f "kernel6" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行raspberrypi4-64镜像编译检查
                                    stageName = "raspberrypi4-64"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行raspberrypi4-64-kernel6.6镜像编译检查
                                    stageName = "raspberrypi4-64-kernel6.6"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -f kernel6 \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行qemu-aarch64-kernel6.6-llvm镜像编译检查
                                    stageName = "qemu-aarch64-kernel6.6-llvm"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p qemu-aarch64 \
                                        -f "kernel6;clang" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行raspberrypi4-64-kernel6.6镜像编译检查
                                    stageName = "raspberrypi4-64-kernel6.6-llvm"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -f "kernel6;clang" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)
                                }
                            }
                        }
                    }
                }
                stage("raspberrypi4-64-rt-hmi raspberrypi4-64-rt-hmi-kernel6.6 hieulerpi1"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    prepare_srccode("/home/jenkins")
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()

                                    // 执行raspberrypi4-64-rt-hmi镜像编译检查
                                    def stageName = "raspberrypi4-64-rt-hmi"
                                    def arch = "aarch64"
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -f "openeuler-rt;hmi" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行raspberrypi4-64-rt-hmi镜像编译检查
                                    stageName = "raspberrypi4-64-rt-hmi-kernel6.6"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -f "openeuler-rt;hmi;kernel6" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行hieulerpi1镜像编译检查
                                    stageName = "hieulerpi1"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p hieulerpi1 \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)
                                }
                            }
                        }
                    }
                }
                stage("hieulerpi-tiny hieulerpi1-ros qemu-arm32"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    prepare_srccode("/home/jenkins")
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()

                                    // 执行hieulerpi1-tiny镜像编译检查
                                    def stageName = "hieulerpi1-tiny"
                                    def arch = "aarch64"
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p hieulerpi1 \
                                        -i "openeuler-image-tiny" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行hieulerpi1-ros镜像编译检查
                                    stageName = "hieulerpi1-ros"
                                    arch = "aarch64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p hieulerpi1 \
                                        -f "openeuler-ros" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行qemu-arm32镜像编译检查
                                    stageName = "qemu-arm32"
                                    arch = "arm32"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm32le \
                                        -p qemu-arm \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)
                                }
                            }
                        }
                    }
                }
                stage("qemu-riscv64 x86-64-rt-hmi-ros-mcs x86-64-rt-hmi-ros-mcs-kernel6.6"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    prepare_srccode("/home/jenkins")
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()

                                    // 执行qemu-riscv64镜像编译检查
                                    def stageName = "qemu-riscv64"
                                    def arch = "riscv64"
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_riscv64 \
                                        -p qemu-riscv64 \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行x86-64-rt-hmi-ros-mcs镜像编译检查
                                    stageName = "x86-64-rt-hmi-ros-mcs"
                                    arch = "x86-64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_x86_64 \
                                        -p x86-64 \
                                        -f "openeuler-rt;hmi;openeuler-ros;openeuler-mcs" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)

                                    // 执行x86-64-rt-hmi-ros-mcs-kernel6.6镜像编译检查
                                    stageName = "x86-64-rt-hmi-ros-mcs-kernel6.6"
                                    arch = "x86-64"
                                    task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a $arch \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_x86_64 \
                                        -p x86-64 \
                                        -f "kernel6;openeuler-rt;hmi;openeuler-ros;openeuler-mcs" \
                                        -i "openeuler-image;openeuler-image -c do_populate_sdk" \
                                        -oe "\\-\\-no_layer" \
                                        -dt $IMAGE_DATE \
                                        -d $stageName > ${logDir}/Build-${stageName}-${randomStr}.log
                                    """, returnStatus: true)
                                    handleAfterBuildImage(stageName, arch, task_res_code, logDir, randomStr, IMAGE_DATE, STAGES_RES)
                                    // 删除编译目录
                                    delete_build_dir(BUILD_DIR_PRE + stageName)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            dir('/home/jenkins/agent/embedded-ci'){
                script{
                    withCredentials([
                        string(credentialsId: "${giteeId}", variable: 'GITEETOKEN')
                    ]){
                        def chks = ""
                        for (int i = 0; i < STAGES_RES.size(); ++i) {
                            chks = "${chks} -chk ${STAGES_RES[i]}"
                        }
                        sh """
                        python3 main.py comment \
                             -m ci \
                             -o $repoNamespace \
                             -p $commentRepoName \
                             -b $ciBranch \
                             -gt $GITEETOKEN \
                             $chks
                        """
                    }
                }
            }
        }
    }
}
