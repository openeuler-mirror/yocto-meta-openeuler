def downloadEmbeddedCI(String remote_url, String branch){
    sh 'rm -rf embedded-ci'
    sh "git clone ${remote_url} -b ${branch} -v embedded-ci --depth=1"
}

def downloadYoctoWithBranch(String workspace, String namespace, String repo, String branch, Integer deepth){
    sh """
        python3 main.py clone_repo \
        -w ${workspace} \
        -r https://gitee.com/${namespace}/${repo} \
        -p ${repo} \
        -v ${branch} \
        -dp ${deepth}
    """
}

def formatRes(String name, String action, String check_res, String log_path){
    return sh (script: """
        python3 main.py serial \
            -c name=${name} \
            -c action=${action} \
            -c result=${check_res} \
            -c log_path=${log_path}
    """, returnStdout: true).trim()
}

def getRandomStr(){
    return sh(script: """
        cat /proc/sys/kernel/random/uuid
    """, returnStdout: true).trim()
}

def mkdirOpeneulerLog(){
    def logdir = "openeuler/log"
    sh "mkdir -p $logdir"
    return logdir
}

def getNowDatetime(){
    return sh(script: """
        date "+%Y%m%d%H%M%S"
    """, returnStdout: true).trim()
}

def uploadImageWithKey(String remote_ip, String remote_dir, String username, String remote_key, String local_dir){
    sh """
        python3 main.py put_remote \
        -i $remote_ip \
        -e $remote_dir \
        -u $username \
        -k $remote_key \
        -ld $local_dir \
        -sign
    """
}

def STAGES_RES = []

def IMAGE_DATE = ""

def IS_FAILD = false

pipeline {
    agent { node "${node}" }
    environment {
        PATH = "/home/jenkins/.local/bin:${env.PATH}"
    }
    stages {
        stage("init task"){
            steps{
                dir('/home/jenkins/agent'){
                    script{
                        downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                        IMAGE_DATE = getNowDatetime()
                    }
                }
            }
        }
        stage("build task"){
            parallel {
                stage("qemu_aarch64"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a aarch64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p qemu-aarch64 \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d qemu-aarch64 > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/aarch64/qemu-aarch64"
                                        local_dir = "~/oebuild_workspace/build/qemu-aarch64/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("qemu_aarch64", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("qemu_ros"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image-ros
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image-ros -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a aarch64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p qemu-aarch64 \
                                        -f openeuler-ros \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d qemu-aarch64-ros > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/aarch64/qemu-aarch64-ros"
                                        local_dir = "~/oebuild_workspace/build/qemu-aarch64-ros/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("qemu_aarch64_ros", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("raspberrypi4_64"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a aarch64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d raspberrypi4-64 > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/aarch64/raspberrypi4-64"
                                        local_dir = "~/oebuild_workspace/build/raspberrypi4-64/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("raspberrypi4_64", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("raspberrypi4_64_rt"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a aarch64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -f openeuler-rt \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d raspberrypi4-64-rt > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/aarch64/raspberrypi4-64-rt"
                                        local_dir = "~/oebuild_workspace/build/raspberrypi4-64-rt/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("raspberrypi4_64_rt", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("raspberrypi4_64_ros"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image-ros
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image-ros -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a aarch64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -f openeuler-ros \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d raspberrypi4-64-ros > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/aarch64/raspberrypi4-64-ros"
                                        local_dir = "~/oebuild_workspace/build/raspberrypi4-64-ros/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("raspberrypi4_64_ros", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("raspberrypi4_64_qt"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a aarch64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p raspberrypi4-64 \
                                        -f openeuler-qt \
                                        -f systemd \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d raspberrypi4-64-qt > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/aarch64/raspberrypi4-64-qt"
                                        local_dir = "~/oebuild_workspace/build/raspberrypi4-64-qt/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("raspberrypi4_64_qt", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("ok3588"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a aarch64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm64le \
                                        -p ok3588 \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d ok3588 > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/aarch64/ok3588"
                                        local_dir = "~/oebuild_workspace/build/ok3588/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("ok3588", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("qemu_arm32"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a arm32 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_arm32le \
                                        -p qemu-arm \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d qemu-arm32 > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/arm32/qemu-arm32"
                                        local_dir = "~/oebuild_workspace/build/qemu-arm32/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("qemu_arm32", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("x86_64"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a x86-64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_x86_64 \
                                        -p x86-64 \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d x86-64 > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/x86-64/x86-64"
                                        local_dir = "~/oebuild_workspace/build/x86-64/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("x86_64", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("x86_64_rt"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a x86-64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_x86_64 \
                                        -p x86-64 \
                                        -f openeuler-rt \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d x86-64 > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/x86-64/x86-64-rt"
                                        local_dir = "~/oebuild_workspace/build/x86-64-rt/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("x86_64_rt", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
                stage("qemu_riscv64"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    // 执行qemu_aarch64编译
                                    // 下载yocto源码
                                    downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    def randomStr = getRandomStr()
                                    def logDir = mkdirOpeneulerLog()
                                    // 对构建命令进行base64编码
                                    def imageCmd = sh (script: """
                                        python3 main.py serial string openeuler-image
                                    """, returnStdout:true).trim()
                                    def imageCmdSdk = sh (script: """
                                        python3 main.py serial string openeuler-image -c do_populate_sdk
                                    """, returnStdout:true).trim()
                                    // 执行镜像编译检查
                                    def task_res_code = sh (script: """
                                        python3 main.py build \
                                        -c /home/jenkins/agent/yocto-meta-openeuler \
                                        -target openeuler_image \
                                        -a riscv64 \
                                        -t /usr1/openeuler/gcc/openeuler_gcc_riscv64 \
                                        -p qemu-riscv64 \
                                        -ic $imageCmd \
                                        -ic $imageCmdSdk \
                                        -dt $IMAGE_DATE \
                                        -d qemu-riscv64 > ${logDir}/${randomStr}.log
                                    """, returnStatus: true)
                                    
                                    def check_res = ""
                                    if (task_res_code == 0){
                                        check_res = "success"
                                        remote_dir = remoteDir+"/riscv64/qemu-riscv64"
                                        local_dir = "~/oebuild_workspace/build/qemu-riscv64/output/${IMAGE_DATE}/"
                                        uploadImageWithKey(remoteIP, remote_dir, remoteUname, remoteKey, local_dir)
                                    }else{
                                        check_res = "failed"
                                        IS_FAILD = true
                                    }
                                    // 对检查赋值
                                    archiveArtifacts "${logDir}/*.log"
                                    STAGES_RES.push(formatRes("qemu_riscv64", "build", check_res, "artifact/${logDir}/${randomStr}.log"))
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            dir('/home/jenkins/agent/embedded-ci'){
                script{
                    withCredentials([
                        string(credentialsId: "${giteeId}", variable: 'GITEETOKEN')]){
                            def chks = ""
                            for (int i = 0; i < STAGES_RES.size(); ++i) {
                                chks = "${chks} -chk ${STAGES_RES[i]}"
                            }
                            sh """
                            python3 main.py comment \
                                 -m ci \
                                 -o $repoNamespace \
                                 -p $repoName \
                                 -b $ciBranch \
                                 -gt $GITEETOKEN \
                                 $chks
                            """
                        }
                }
            }
        }
    }
}
