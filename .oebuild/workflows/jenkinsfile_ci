def BUILD_COM
def IMAGE_DATE = ""

pipeline {
    agent { node "${node}" }
    environment {
        PATH = "/home/jenkins/.local/bin:${env.PATH}"
    }
    stages {
        stage("init task"){
            steps{
                script{
                    BUILD_COM = load '.oebuild/workflows/build_common.groovy'
                    IMAGE_DATE = BUILD_COM.getNowDatetime()
                }
                dir('/home/jenkins/agent'){
                    script{
                        BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                    }
                }
                dir('/home/jenkins/agent/embedded-ci'){
                    script{
                        BUILD_COM.downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                    }
                }
                dir('/home/jenkins/agent/embedded-ci'){
                    stash(name: "embedded-ci")
                }
                dir('/home/jenkins/agent/yocto-meta-openeuler'){
                    stash(name: "yocto-meta-openeuler")
                }
            }
        }
        stage("build task"){
            parallel {
                stage("group1"){
                    agent { node "${node}" }
                    when {
                        expression { env.group1 != null }
                    }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                sh "mkdir embedded-ci"
                                sh "mkdir yocto-meta-openeuler"
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                        }
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            unstash(name: "yocto-meta-openeuler")
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group1.split()){
                                        println "build ${image_name} ..."
                                        image_name_split = image_name.split("/")
                                        yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                                        BUILD_COM.dynamicBuild(yocto_dir, image_name_split[0], image_name_split[1], IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("group2"){
                    agent { node "${node}" }
                    when {
                        expression { env.group2 != null }
                    }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                sh "mkdir embedded-ci"
                                sh "mkdir yocto-meta-openeuler"
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                        }
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            unstash(name: "yocto-meta-openeuler")
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group1.split()){
                                        println "build ${image_name} ..."
                                        image_name_split = image_name.split("/")
                                        yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                                        BUILD_COM.dynamicBuild(yocto_dir, image_name_split[0], image_name_split[1], IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("group3"){
                    agent { node "${node}" }
                    when {
                        expression { env.group3 != null }
                    }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                sh "mkdir embedded-ci"
                                sh "mkdir yocto-meta-openeuler"
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                        }
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            unstash(name: "yocto-meta-openeuler")
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group1.split()){
                                        println "build ${image_name} ..."
                                        image_name_split = image_name.split("/")
                                        yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                                        BUILD_COM.dynamicBuild(yocto_dir, image_name_split[0], image_name_split[1], IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("group4"){
                    agent { node "${node}" }
                    when {
                        expression { env.group4 != null }
                    }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                sh "mkdir embedded-ci"
                                sh "mkdir yocto-meta-openeuler"
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                        }
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            unstash(name: "yocto-meta-openeuler")
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group1.split()){
                                        println "build ${image_name} ..."
                                        image_name_split = image_name.split("/")
                                        yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                                        BUILD_COM.dynamicBuild(yocto_dir, image_name_split[0], image_name_split[1], IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("group5"){/
                    agent { node "${node}" }
                    when {
                        expression { env.group5 != null }
                    }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                sh "mkdir embedded-ci"
                                sh "mkdir yocto-meta-openeuler"
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            unstash(name: "embedded-ci")
                        }
                        dir('/home/jenkins/agent/yocto-meta-openeuler'){
                            unstash(name: "yocto-meta-openeuler")
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group1.split()){
                                        println "build ${image_name} ..."
                                        image_name_split = image_name.split("/")
                                        yocto_dir = "/home/jenkins/agent/yocto-meta-openeuler"
                                        BUILD_COM.dynamicBuild(yocto_dir, image_name_split[0], image_name_split[1], IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            when {
                expression { env.isComment != null and env.isComment }
            }
            dir('/home/jenkins/agent/embedded-ci'){
                script{
                    withCredentials([
                        string(credentialsId: "${giteeId}", variable: 'GITEETOKEN')
                    ]){
                        def chks = ""
                        for (int i = 0; i < BUILD_COM.STAGES_RES.size(); ++i) {
                            chks = "${chks} -chk ${BUILD_COM.STAGES_RES[i]}"
                        }
                        sh """
                        python3 main.py comment \
                             -m ci \
                             -o ${repoNamespace} \
                             -p ${commentRepoName} \
                             -b ${ciBranch} \
                             -gt ${GITEETOKEN} \
                             ${chks}
                        """
                    }
                }
            }
        }
    }
}