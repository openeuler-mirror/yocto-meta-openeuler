def BUILD_COM
def IMAGE_DATE = ""

pipeline {
    agent { node "${node}" }
    environment {
        PATH = "/home/jenkins/.local/bin:${env.PATH}"
    }
    stages {
        stage("init task"){
            steps{
                script{
                    BUILD_COM = load '.oebuild/workflows/build_common.groovy'
                }
                dir('/home/jenkins/agent'){
                    script{
                        BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                        IMAGE_DATE = BUILD_COM.getNowDatetime()
                    }
                }
            }
        }
        stage("build task"){
            parallel {
                stage("group1"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    BUILD_COM.downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group1.split()){
                                        println "build ${image_name} ..."
                                        BUILD_COM.dynamicBuild(image_name, IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("group2"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    BUILD_COM.downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group2.split()){
                                        println "build ${image_name} ..."
                                        BUILD_COM.dynamicBuild(image_name, IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("group3"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    BUILD_COM.downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group3.split()){
                                        println "build ${image_name} ..."
                                        BUILD_COM.dynamicBuild(image_name, IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("group4"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    BUILD_COM.downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group4.split()){
                                        println "build ${image_name} ..."
                                        BUILD_COM.dynamicBuild(image_name, IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
                stage("group5"){
                    agent { node "${node}" }
                    steps {
                        dir('/home/jenkins/agent'){
                            script{
                                BUILD_COM.downloadEmbeddedCI(embeddedRemote, embeddedBranch)
                            }
                        }
                        dir('/home/jenkins/agent/embedded-ci'){
                            script{
                                withCredentials([
                                    file(credentialsId: remoteID, variable: 'remoteKey')
                                ]){
                                    //下载yocto-meta-openeuler代码
                                    BUILD_COM.downloadYoctoWithBranch("/home/jenkins/agent", repoNamespace, repoName, ciBranch, 1)
                                    BUILD_COM.prepareSrcCode("/home/jenkins")
                                    def random_str = BUILD_COM.getRandomStr()
                                    def log_dir = BUILD_COM.mkdirOpeneulerLog()

                                    for (image_name in group5.split()){
                                        println "build ${image_name} ..."
                                        BUILD_COM.dynamicBuild(image_name, IMAGE_DATE, log_dir, random_str)
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            dir('/home/jenkins/agent/embedded-ci'){
                script{
                    withCredentials([
                        string(credentialsId: "${giteeId}", variable: 'GITEETOKEN')
                    ]){
                        def chks = ""
                        for (int i = 0; i < BUILD_COM.STAGES_RES.size(); ++i) {
                            chks = "${chks} -chk ${BUILD_COM.STAGES_RES[i]}"
                        }
                        sh """
                        python3 main.py comment \
                             -m ci \
                             -o ${repoNamespace} \
                             -p ${commentRepoName} \
                             -b ${ciBranch} \
                             -gt ${GITEETOKEN} \
                             ${chks}
                        """
                    }
                }
            }
        }
    }
}