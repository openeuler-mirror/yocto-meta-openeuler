From e9ace71c7216fc8f8abc7bd63e6a29af95aacb33 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E9=BB=84=E7=82=8E?= <huangyan@cdjrlc.com>
Date: Tue, 19 Sep 2023 10:41:41 +0800
Subject: [PATCH] allow-ACPI-AML-cover-the-kernel-memory

---
 arch/arm64/include/asm/acpi.h |  21 ++++--
 arch/arm64/kernel/acpi.c      | 123 +---------------------------------
 2 files changed, 16 insertions(+), 128 deletions(-)

diff --git a/arch/arm64/include/asm/acpi.h b/arch/arm64/include/asm/acpi.h
index 8f67d367e..be2993281 100644
--- a/arch/arm64/include/asm/acpi.h
+++ b/arch/arm64/include/asm/acpi.h
@@ -45,12 +45,26 @@
 #define ACPI_MADT_GICC_TRBE  (offsetof(struct acpi_madt_generic_interrupt, \
 	trbe_interrupt) + sizeof(u16))
 
+
 /* Basic configuration for ACPI */
 #ifdef	CONFIG_ACPI
 pgprot_t __acpi_get_mem_attribute(phys_addr_t addr);
 
 /* ACPI table mapping after acpi_permanent_mmap is set */
-void __iomem *acpi_os_ioremap(acpi_physical_address phys, acpi_size size);
+static inline void __iomem *acpi_os_ioremap(acpi_physical_address phys,
+					    acpi_size size)
+{
+	/* For normal memory we already have a cacheable mapping. */
+	if (memblock_is_map_memory(phys))
+		return (void __iomem *)__phys_to_virt(phys);
+
+	/*
+	 * We should still honor the memory's attribute here because
+	 * crash dump kernel possibly excludes some ACPI (reclaim)
+	 * regions from memblock list.
+	 */
+	return __ioremap(phys, size, __acpi_get_mem_attribute(phys));
+}
 #define acpi_os_ioremap acpi_os_ioremap
 
 typedef u64 phys_cpuid_t;
@@ -103,11 +117,6 @@ static inline u32 get_acpi_id_for_cpu(unsigned int cpu)
 static inline void arch_fix_phys_package_id(int num, u32 slot) { }
 void __init acpi_init_cpus(void);
 int apei_claim_sea(struct pt_regs *regs);
-void acpi_pptt_find_min_physid_cpu_node(struct acpi_table_header *table_hdr,
-			struct acpi_pptt_processor *cpu_node,
-			phys_cpuid_t *min_physid,
-			struct acpi_pptt_processor **min_cpu_node);
-
 #else
 static inline void acpi_init_cpus(void) { }
 static inline int apei_claim_sea(struct pt_regs *regs) { return -ENOENT; }
diff --git a/arch/arm64/kernel/acpi.c b/arch/arm64/kernel/acpi.c
index a81105cfe..4f428685f 100644
--- a/arch/arm64/kernel/acpi.c
+++ b/arch/arm64/kernel/acpi.c
@@ -27,11 +27,9 @@
 #include <linux/pgtable.h>
 
 #include <acpi/ghes.h>
-#include <acpi/processor.h>
 #include <asm/cputype.h>
 #include <asm/cpu_ops.h>
 #include <asm/daifflags.h>
-#include <asm/numa.h>
 #include <asm/smp_plat.h>
 
 int acpi_noirq = 1;		/* skip ACPI IRQ initialization */
@@ -263,93 +261,6 @@ pgprot_t __acpi_get_mem_attribute(phys_addr_t addr)
 	return __pgprot(PROT_DEVICE_nGnRnE);
 }
 
-void __iomem *acpi_os_ioremap(acpi_physical_address phys, acpi_size size)
-{
-	efi_memory_desc_t *md, *region = NULL;
-	pgprot_t prot;
-
-	if (WARN_ON_ONCE(!efi_enabled(EFI_MEMMAP)))
-		return NULL;
-
-	for_each_efi_memory_desc(md) {
-		u64 end = md->phys_addr + (md->num_pages << EFI_PAGE_SHIFT);
-
-		if (phys < md->phys_addr || phys >= end)
-			continue;
-
-		if (phys + size > end) {
-			pr_warn(FW_BUG "requested region covers multiple EFI memory regions\n");
-			return NULL;
-		}
-		region = md;
-		break;
-	}
-
-	/*
-	 * It is fine for AML to remap regions that are not represented in the
-	 * EFI memory map at all, as it only describes normal memory, and MMIO
-	 * regions that require a virtual mapping to make them accessible to
-	 * the EFI runtime services.
-	 */
-	prot = __pgprot(PROT_DEVICE_nGnRnE);
-	if (region) {
-		switch (region->type) {
-		case EFI_LOADER_CODE:
-		case EFI_LOADER_DATA:
-		case EFI_BOOT_SERVICES_CODE:
-		case EFI_BOOT_SERVICES_DATA:
-		case EFI_CONVENTIONAL_MEMORY:
-		case EFI_PERSISTENT_MEMORY:
-			if (memblock_is_map_memory(phys) ||
-			    !memblock_is_region_memory(phys, size)) {
-				pr_warn(FW_BUG "requested region covers kernel memory @ %pa\n", &phys);
-				return NULL;
-			}
-			/*
-			 * Mapping kernel memory is permitted if the region in
-			 * question is covered by a single memblock with the
-			 * NOMAP attribute set: this enables the use of ACPI
-			 * table overrides passed via initramfs, which are
-			 * reserved in memory using arch_reserve_mem_area()
-			 * below. As this particular use case only requires
-			 * read access, fall through to the R/O mapping case.
-			 */
-			fallthrough;
-
-		case EFI_RUNTIME_SERVICES_CODE:
-			/*
-			 * This would be unusual, but not problematic per se,
-			 * as long as we take care not to create a writable
-			 * mapping for executable code.
-			 */
-			prot = PAGE_KERNEL_RO;
-			break;
-
-		case EFI_ACPI_RECLAIM_MEMORY:
-			/*
-			 * ACPI reclaim memory is used to pass firmware tables
-			 * and other data that is intended for consumption by
-			 * the OS only, which may decide it wants to reclaim
-			 * that memory and use it for something else. We never
-			 * do that, but we usually add it to the linear map
-			 * anyway, in which case we should use the existing
-			 * mapping.
-			 */
-			if (memblock_is_map_memory(phys))
-				return (void __iomem *)__phys_to_virt(phys);
-			fallthrough;
-
-		default:
-			if (region->attribute & EFI_MEMORY_WB)
-				prot = PAGE_KERNEL;
-			else if (region->attribute & EFI_MEMORY_WT)
-				prot = __pgprot(PROT_NORMAL_WT);
-			else if (region->attribute & EFI_MEMORY_WC)
-				prot = __pgprot(PROT_NORMAL_NC);
-		}
-	}
-	return __ioremap(phys, size, prot);
-}
 
 /*
  * Claim Synchronous External Aborts as a firmware first notification.
@@ -404,39 +315,7 @@ int apei_claim_sea(struct pt_regs *regs)
 	return err;
 }
 
-int acpi_map_cpu(acpi_handle handle, phys_cpuid_t physid, u32 acpi_id,
-		 int *pcpu)
-{
-	int cpu, nid;
-
-	cpu = acpi_map_cpuid(physid, acpi_id);
-	if (cpu < 0) {
-		pr_info("Unable to map GICC to logical cpu number\n");
-		return cpu;
-	}
-	nid = acpi_get_node(handle);
-	if (nid != NUMA_NO_NODE) {
-		set_cpu_numa_node(cpu, nid);
-		numa_add_cpu(cpu);
-	}
-
-	*pcpu = cpu;
-	set_cpu_present(cpu, true);
-
-	return 0;
-}
-EXPORT_SYMBOL(acpi_map_cpu);
-
-int acpi_unmap_cpu(int cpu)
-{
-	set_cpu_present(cpu, false);
-	numa_clear_node(cpu);
-
-	return 0;
-}
-EXPORT_SYMBOL(acpi_unmap_cpu);
-
 void arch_reserve_mem_area(acpi_physical_address addr, size_t size)
 {
-	memblock_mark_nomap(addr, size);
+
 }
