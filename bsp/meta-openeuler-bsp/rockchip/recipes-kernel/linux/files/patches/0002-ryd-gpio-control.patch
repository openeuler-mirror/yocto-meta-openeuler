diff --git a/drivers/char/Kconfig b/drivers/char/Kconfig
index f75f9e3ea..7b075bc11 100644
--- a/drivers/char/Kconfig
+++ b/drivers/char/Kconfig
@@ -7,6 +7,12 @@ menu "Character devices"
 
 source "drivers/tty/Kconfig"
 
+config RYD_GPIO_CONTROL
+	tristate "Support New RYD GPIO Control (Not use anymore)"
+	default y
+	help
+	  If you say Y here, you will get support for a character device
+
 config TTY_PRINTK
 	tristate "TTY driver to output user messages via printk"
 	depends on EXPERT && TTY
diff --git a/drivers/char/Makefile b/drivers/char/Makefile
index 362d4a9cd..6920dbb7d 100644
--- a/drivers/char/Makefile
+++ b/drivers/char/Makefile
@@ -49,3 +49,4 @@ obj-$(CONFIG_XILLYBUS)          += xillybus/
 obj-$(CONFIG_POWERNV_OP_PANEL)	+= powernv-op-panel.o
 obj-$(CONFIG_ADI)		+= adi.o
 obj-$(CONFIG_PIN_MEMORY_DEV)	+= pin_memory.o
+obj-y	+= ryd_gpio_controls.o

diff -uprN a/drivers/char/ryd_gpio_controls.c b/drivers/char/ryd_gpio_controls.c
--- a/drivers/char/ryd_gpio_controls.c	1970-01-01 00:00:00.000000000 +0000
+++ b/drivers/char/ryd_gpio_controls.c	2023-03-14 08:15:53.465817342 +0000
@@ -0,0 +1,264 @@
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/fb.h>
+#include <linux/gpio.h>
+#include <linux/input.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/of_gpio.h>
+#include <linux/platform_device.h>
+
+#define D_DIRE_OUT 1
+#define D_DIRE_IN 0
+
+#define D_PULL_NULL 0
+#define D_PULL_LOW 1
+#define D_PULL_UP 2
+/*
+ryd_gpio_control {
+	compatible = "ryd_gpio_control";
+	#address-cells = <1>;
+	#size-cells = <0>;
+
+	title {
+		gpio = <&gpio8 3 GPIO_ACTIVE_LOW>;
+		pull_cfg =  0=null 1=pulldown 2=pullup
+		dire_in:defaule dire_out
+		sys_create: create sys node
+		export:export gpio
+	}
+	
+};*/
+
+struct gpio_des {
+	char name[20];
+	int gpio;
+	char flags;
+	char dir;
+	char pulldata;
+	char resetdelay;
+	char export;
+	struct device_attribute sysnode;
+};
+
+struct ryd_gpio_des {
+	int gpio_num;
+	struct gpio_des gpio_des_data[30];
+};
+
+static struct platform_driver ryd_gpio_driver;
+
+static ssize_t gpio_state_store(struct device *dev,
+	struct device_attribute *attr,
+	const char *buf, size_t len)
+{
+	int index = 0;
+	int value = buf[0] - 48;
+	if ((value == 0) || (value == 1))
+	{
+		struct ryd_gpio_des *data = dev_get_drvdata(dev);
+		while(index < data->gpio_num)
+		{
+			if(strcmp(attr->attr.name,data->gpio_des_data[index].name) == 0)
+			{
+				if (data->gpio_des_data[index].dir == D_DIRE_OUT)
+				{
+					if (gpio_cansleep(data->gpio_des_data[index].gpio) == 1)
+						gpiod_set_value_cansleep(gpio_to_desc(data->gpio_des_data[index].gpio),value);
+					else
+						gpio_direction_output(data->gpio_des_data[index].gpio,value);
+				}
+				break;
+			}
+			index++;
+		}
+	}
+	
+	return len;
+}
+
+static ssize_t gpio_state_show(struct device *dev, struct device_attribute *attr,char *buf)
+{
+	int index = 0;
+	int value = -1;
+	struct ryd_gpio_des *data = dev_get_drvdata(dev);
+	while(index < data->gpio_num)
+	{
+		if(strcmp(attr->attr.name,data->gpio_des_data[index].name) == 0)
+		{
+			if (gpio_cansleep(data->gpio_des_data[index].gpio) == 1)
+				value = gpiod_get_value_cansleep(gpio_to_desc(data->gpio_des_data[index].gpio));
+			else
+				value = gpio_get_value(data->gpio_des_data[index].gpio);	
+			break;
+		}
+		index++;
+	}
+
+	return sprintf(buf, "%d\n", value);
+}
+
+static int rydgpio_parse_dt(struct device_node *fathernode,struct ryd_gpio_des *data)
+{
+	struct device_node *childnode;
+	enum of_gpio_flags flags;
+	data->gpio_num = 0;
+	for_each_child_of_node(fathernode, childnode) 
+	{
+		data->gpio_des_data[data->gpio_num].gpio = of_get_named_gpio_flags(childnode, "gpio", 0,&flags);
+
+		if (!gpio_is_valid(data->gpio_des_data[data->gpio_num].gpio))
+		{
+			printk("get ryd gpio is error\n");
+			continue;
+		}
+		data->gpio_des_data[data->gpio_num].flags = (flags == OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+		data->gpio_des_data[data->gpio_num].dir = D_DIRE_OUT;
+		if (of_property_read_bool(childnode, "dir_in"))
+		{
+			data->gpio_des_data[data->gpio_num].dir = D_DIRE_IN;
+		}
+
+		of_property_read_u8(childnode, "pull_cfg", &(data->gpio_des_data[data->gpio_num].pulldata));
+
+		if (of_property_read_bool(childnode, "sys_create"))
+		{
+			sprintf(data->gpio_des_data[data->gpio_num].name,childnode->name);
+		}
+		else
+		{
+			sprintf(data->gpio_des_data[data->gpio_num].name,"null");
+		}
+
+		data->gpio_des_data[data->gpio_num].resetdelay = 0;
+		if (of_property_read_bool(childnode, "reset_pin"))
+		{
+			of_property_read_u8(childnode, "reset_pin", &(data->gpio_des_data[data->gpio_num].resetdelay));
+		}
+
+		if (of_property_read_bool(childnode, "export"))
+		{
+			data->gpio_des_data[data->gpio_num].export = 1;
+		}
+
+		data->gpio_num++;
+	}
+	return 0;
+}
+
+static int rydgpio_deal(struct platform_device *pdev,struct ryd_gpio_des *data)
+{
+	int index = 0;
+	int ret;
+	while(index < data->gpio_num)
+	{
+		ret = gpio_request(data->gpio_des_data[index].gpio,data->gpio_des_data[index].name);
+		if (ret != 0) {
+			pr_err("gpio_request gpio invalid: %d\n",index);
+		}
+		else
+		{
+			//deal reset
+			if (data->gpio_des_data[index].resetdelay > 0)
+			{
+				if (data->gpio_des_data[index].dir == D_DIRE_OUT)
+				{
+					if (gpio_cansleep(data->gpio_des_data[index].gpio) == 1)
+						gpiod_set_value_cansleep(gpio_to_desc(data->gpio_des_data[index].gpio),!data->gpio_des_data[index].flags);
+					else
+						gpio_direction_output(data->gpio_des_data[index].gpio,!data->gpio_des_data[index].flags);
+				}
+				msleep(data->gpio_des_data[index].resetdelay);
+			}
+
+			if (data->gpio_des_data[index].dir == D_DIRE_OUT)
+			{
+				gpio_direction_output(data->gpio_des_data[index].gpio,data->gpio_des_data[index].flags);
+				if (gpio_cansleep(data->gpio_des_data[index].gpio) == 1)
+					gpiod_set_value_cansleep(gpio_to_desc(data->gpio_des_data[index].gpio),data->gpio_des_data[index].flags);
+				else
+					gpio_direction_output(data->gpio_des_data[index].gpio,data->gpio_des_data[index].flags);
+			}
+
+			if (data->gpio_des_data[index].pulldata == D_PULL_UP)
+			{
+
+			}
+			else if(data->gpio_des_data[index].pulldata == D_PULL_LOW)
+			{
+
+			}
+
+			if (strcmp(data->gpio_des_data[index].name,"null") != 0)
+			{
+				data->gpio_des_data[index].sysnode.attr.name = data->gpio_des_data[index].name;
+				data->gpio_des_data[index].sysnode.attr.mode = S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH;
+				data->gpio_des_data[index].sysnode.show = gpio_state_show;
+				data->gpio_des_data[index].sysnode.store = gpio_state_store;
+				device_create_file(&pdev->dev,&(data->gpio_des_data[index].sysnode));
+			}
+
+			if (data->gpio_des_data[index].export == 1)
+			{
+				if (data->gpio_des_data[index].dir == D_DIRE_IN){
+					gpio_direction_input(data->gpio_des_data[index].gpio);
+					gpio_export(data->gpio_des_data[index].gpio,0);
+				}
+				else 
+					gpio_export(data->gpio_des_data[index].gpio,1);
+			}
+		}
+		index++;
+	}
+	return 0;
+}
+
+static int ryd_gpio_probe(struct platform_device *pdev)
+{
+	struct ryd_gpio_des *platdata;
+	platdata = devm_kzalloc(&pdev->dev, sizeof(struct ryd_gpio_des),GFP_KERNEL);
+
+	if (!platdata)
+		return -ENOMEM;
+
+	printk("start new gpio_probe\n");
+
+	rydgpio_parse_dt(pdev->dev.of_node,platdata);
+	rydgpio_deal(pdev,platdata);
+
+	platform_set_drvdata(pdev, platdata);
+
+	printk("start end gpio_probe\n");
+
+	return 0;
+}
+
+
+static const struct of_device_id ryd_gpio_dt_ids[] = {
+	{.compatible = "ryd_gpio_control",},
+	{}
+};
+
+static struct platform_driver ryd_gpio_driver = {
+	.probe = ryd_gpio_probe,
+	.driver = {
+		.name = "ryd_gpio_control",
+		.owner = THIS_MODULE,
+		.of_match_table = of_match_ptr(ryd_gpio_dt_ids),
+	},
+};
+
+static int __init ryd_gpio_init(void)
+{
+	int retval;
+	retval = platform_driver_register(&ryd_gpio_driver);
+	return retval;
+}
+
+static void __exit ryd_gpio_exit(void)
+{
+	platform_driver_unregister(&ryd_gpio_driver);
+}
+
+subsys_initcall_sync(ryd_gpio_init);
+module_exit(ryd_gpio_exit);
